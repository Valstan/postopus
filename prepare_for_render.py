#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞ Postopus –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ Render.com
"""
import os
import sys
import subprocess
import json
from pathlib import Path

def print_step(step, description):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–≥–µ."""
    print(f"\nüéØ –®–∞–≥ {step}: {description}")
    print("=" * 50)

def run_command(command, description):
    """–í—ã–ø–æ–ª–Ω—è–µ—Ç –∫–æ–º–∞–Ω–¥—É –∏ –≤—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç."""
    print(f"üìù {description}")
    try:
        result = subprocess.run(command, shell=True, check=True, capture_output=True, text=True)
        print(f"‚úÖ {description} - —É—Å–ø–µ—à–Ω–æ")
        return True
    except subprocess.CalledProcessError as e:
        print(f"‚ùå {description} - –æ—à–∏–±–∫–∞: {e}")
        print(f"–í—ã–≤–æ–¥: {e.stdout}")
        print(f"–û—à–∏–±–∫–∞: {e.stderr}")
        return False

def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è."""
    print_step(1, "–ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏—è")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω –ª–∏ Git
    if not Path(".git").exists():
        print("üìù –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π...")
        if not run_command("git init", "–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Git"):
            return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
    result = subprocess.run("git status --porcelain", shell=True, capture_output=True, text=True)
    if result.stdout.strip():
        print("üìù –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
        print(result.stdout)
        return True
    else:
        print("‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã")
        return True

def create_env_file():
    """–°–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª –¥–ª—è –ª–æ–∫–∞–ª—å–Ω–æ–π —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏."""
    print_step(2, "–°–æ–∑–¥–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞")
    
    if Path(".env").exists():
        print("‚úÖ .env —Ñ–∞–π–ª —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        return True
    
    if Path("env.example").exists():
        print("üìù –ö–æ–ø–∏—Ä—É–µ–º env.example –≤ .env...")
        if run_command("cp env.example .env", "–ö–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–µ .env —Ñ–∞–π–ª–∞"):
            print("‚ö†Ô∏è  –ù–µ –∑–∞–±—É–¥—å—Ç–µ –æ—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞—Ç—å .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏!")
            return True
    
    print("‚ùå –§–∞–π–ª env.example –Ω–µ –Ω–∞–π–¥–µ–Ω")
    return False

def check_required_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤."""
    print_step(3, "–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö —Ñ–∞–π–ª–æ–≤")
    
    required_files = [
        "requirements_render.txt",
        "src/web/main_render.py",
        "render.yaml",
        "README.md",
        ".gitignore"
    ]
    
    missing_files = []
    for file in required_files:
        if not Path(file).exists():
            missing_files.append(file)
        else:
            print(f"‚úÖ {file}")
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        return False
    
    print("‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã –ø—Ä–∏—Å—É—Ç—Å—Ç–≤—É—é—Ç")
    return True

def create_github_repo_instructions():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è GitHub."""
    print_step(4, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è GitHub")
    
    instructions = """
üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø –°–û–ó–î–ê–ù–ò–Ø GITHUB –†–ï–ü–û–ó–ò–¢–û–†–ò–Ø:

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://github.com
2. –ù–∞–∂–º–∏—Ç–µ "New repository"
3. –ù–∞–∑–æ–≤–∏—Ç–µ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π: postopus
4. –°–¥–µ–ª–∞–π—Ç–µ –µ–≥–æ –ø—É–±–ª–∏—á–Ω—ã–º
5. –ù–ï –¥–æ–±–∞–≤–ª—è–π—Ç–µ README, .gitignore –∏–ª–∏ –ª–∏—Ü–µ–Ω–∑–∏—é
6. –ù–∞–∂–º–∏—Ç–µ "Create repository"

üìã –ö–û–ú–ê–ù–î–´ –î–õ–Ø –ó–ê–ì–†–£–ó–ö–ò –ö–û–î–ê:

git add .
git commit -m "Initial commit: Postopus web platform"
git branch -M main
git remote add origin https://github.com/YOUR_USERNAME/postopus.git
git push -u origin main

–ó–∞–º–µ–Ω–∏—Ç–µ YOUR_USERNAME –Ω–∞ –≤–∞—à GitHub username!
"""
    
    print(instructions)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    with open("GITHUB_INSTRUCTIONS.txt", "w", encoding="utf-8") as f:
        f.write(instructions)
    
    print("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ GITHUB_INSTRUCTIONS.txt")

def create_render_instructions():
    """–°–æ–∑–¥–∞–µ—Ç –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Render.com."""
    print_step(5, "–ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –¥–ª—è Render.com")
    
    instructions = """
üìã –ò–ù–°–¢–†–£–ö–¶–ò–ò –î–õ–Ø RENDER.COM:

1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://render.com
2. –í–æ–π–¥–∏—Ç–µ —á–µ—Ä–µ–∑ GitHub
3. –°–æ–∑–¥–∞–π—Ç–µ PostgreSQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö:
   - Name: postopus-db
   - Plan: Free
4. –°–æ–∑–¥–∞–π—Ç–µ Redis:
   - Name: postopus-redis
   - Plan: Free
5. –°–æ–∑–¥–∞–π—Ç–µ Web Service:
   - –ü–æ–¥–∫–ª—é—á–∏—Ç–µ GitHub —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π
   - Build Command: pip install -r requirements_render.txt
   - Start Command: python -m uvicorn src.web.main_render:app --host 0.0.0.0 --port $PORT
6. –°–æ–∑–¥–∞–π—Ç–µ Background Worker (Celery):
   - Name: postopus-worker
   - Start Command: celery -A src.tasks.celery_app worker --loglevel=info
7. –°–æ–∑–¥–∞–π—Ç–µ Background Worker (Scheduler):
   - Name: postopus-scheduler
   - Start Command: celery -A src.tasks.celery_app beat --loglevel=info

üìã –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:

MONGO_CLIENT = (Connection String –∏–∑ PostgreSQL)
REDIS_URL = (Connection String –∏–∑ Redis)
CELERY_BROKER_URL = (Connection String –∏–∑ Redis)
CELERY_RESULT_BACKEND = (Connection String –∏–∑ Redis)
SECRET_KEY = (—Å–≥–µ–Ω–µ—Ä–∏—Ä—É–π—Ç–µ —Å–ª—É—á–∞–π–Ω—É—é —Å—Ç—Ä–æ–∫—É 32+ —Å–∏–º–≤–æ–ª–æ–≤)
LOG_LEVEL = INFO
VK_TOKENS = your_vk_token_1,your_vk_token_2
VK_READ_TOKENS = your_read_token_1,your_read_token_2
VK_POST_TOKENS = your_post_token_1,your_post_token_2
VK_REPOST_TOKENS = your_repost_token_1,your_repost_token_2
TELEGRAM_BOT_TOKEN = your_bot_token
TELEGRAM_CHAT_ID = your_chat_id

üìã –ü–û–°–õ–ï –†–ê–ó–í–ï–†–¢–´–í–ê–ù–ò–Ø:

1. –û—Ç–∫—Ä–æ–π—Ç–µ URL –≤–∞—à–µ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
2. –ó–∞—Ä–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –∫–∞–∫ –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä
3. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ VK API —Ç–æ–∫–µ–Ω—ã
4. –°–æ–∑–¥–∞–π—Ç–µ –∑–∞–¥–∞—á–∏ –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–µ
5. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ —Ä–∞–±–æ—Ç—É

–ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: DEPLOY_TO_RENDER.md
"""
    
    print(instructions)
    
    # –°–æ–∑–¥–∞–µ–º —Ñ–∞–π–ª —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏
    with open("RENDER_INSTRUCTIONS.txt", "w", encoding="utf-8") as f:
        f.write(instructions)
    
    print("üìù –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ RENDER_INSTRUCTIONS.txt")

def generate_secret_key():
    """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç —Å–µ–∫—Ä–µ—Ç–Ω—ã–π –∫–ª—é—á."""
    import secrets
    return secrets.token_urlsafe(32)

def create_env_template():
    """–°–æ–∑–¥–∞–µ—Ç —à–∞–±–ª–æ–Ω .env —Ñ–∞–π–ª–∞ —Å –ø—Ä–∏–º–µ—Ä–Ω—ã–º–∏ –∑–Ω–∞—á–µ–Ω–∏—è–º–∏."""
    print_step(6, "–°–æ–∑–¥–∞–Ω–∏–µ —à–∞–±–ª–æ–Ω–∞ .env —Ñ–∞–π–ª–∞")
    
    secret_key = generate_secret_key()
    
    env_template = f"""# Database configuration
MONGO_CLIENT=mongodb://localhost:27017/

# VK API tokens (comma-separated)
VK_TOKENS=your_vk_token_1,your_vk_token_2
VK_READ_TOKENS=your_read_token_1,your_read_token_2
VK_POST_TOKENS=your_post_token_1,your_post_token_2
VK_REPOST_TOKENS=your_repost_token_1,your_repost_token_2

# Telegram configuration
TELEGRAM_BOT_TOKEN=your_bot_token
TELEGRAM_CHAT_ID=your_chat_id

# Application settings
LOG_LEVEL=INFO
LOG_FILE=logs/postopus.log

# Security settings
SECRET_KEY={secret_key}
ENCRYPTION_KEY=your_encryption_key_here

# Render.com specific (will be set automatically)
# PORT=8000
# DATABASE_URL=postgresql://...
# REDIS_URL=redis://...
"""
    
    with open(".env.template", "w", encoding="utf-8") as f:
        f.write(env_template)
    
    print("‚úÖ –°–æ–∑–¥–∞–Ω .env.template —Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–º SECRET_KEY")
    print(f"üîë –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SECRET_KEY: {secret_key}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ Postopus –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ Render.com")
    print("=" * 60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º—ã –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
    if not Path("src").exists():
        print("‚ùå –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç –∏–∑ –∫–æ—Ä–Ω–µ–≤–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ –ø—Ä–æ–µ–∫—Ç–∞ Postopus")
        sys.exit(1)
    
    success = True
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ —à–∞–≥–∏
    success &= check_git_status()
    success &= create_env_file()
    success &= check_required_files()
    create_github_repo_instructions()
    create_render_instructions()
    create_env_template()
    
    print("\n" + "=" * 60)
    if success:
        print("üéâ –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª —Å –≤–∞—à–∏–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏")
        print("2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ GITHUB_INSTRUCTIONS.txt")
        print("3. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ RENDER_INSTRUCTIONS.txt")
        print("4. –ò–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–æ–¥—Ä–æ–±–Ω—É—é –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—é DEPLOY_TO_RENDER.md")
        print("\nüöÄ –£–¥–∞—á–∏ —Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º!")
    else:
        print("‚ùå –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —Å –æ—à–∏–±–∫–∞–º–∏")
        print("–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–æ–±—â–µ–Ω–∏—è –≤—ã—à–µ –∏ –∏—Å–ø—Ä–∞–≤—å—Ç–µ –ø—Ä–æ–±–ª–µ–º—ã")
        sys.exit(1)

if __name__ == "__main__":
    main()

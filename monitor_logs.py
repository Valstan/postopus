#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –ª–æ–≥–æ–≤ Render –≤–æ –≤—Ä–µ–º—è –¥–µ–ø–ª–æ—è
—Å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö –∏ —Ñ–∏–ª—å—Ç—Ä–∞—Ü–∏–µ–π
"""
import time
import sys
import json
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import asyncio

class LogLevel:
    """–£—Ä–æ–≤–Ω–∏ –≤–∞–∂–Ω–æ—Å—Ç–∏ –ª–æ–≥–æ–≤"""
    CRITICAL = "critical"
    ERROR = "error" 
    WARNING = "warning"
    INFO = "info"
    DEBUG = "debug"

class DeploymentMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –¥–µ–ø–ª–æ—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º–∏ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏—è–º–∏"""
    
    def __init__(self, service_id: str, deploy_id: str):
        self.service_id = service_id
        self.deploy_id = deploy_id
        self.start_time = datetime.now()
        self.critical_errors = []
        self.build_errors = []
        self.app_errors = []
        
    def log_message(self, level: str, message: str, category: str = "general"):
        """–õ–æ–≥–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –≤—Ä–µ–º–µ–Ω–Ω–æ–π –º–µ—Ç–∫–æ–π"""
        timestamp = datetime.now().strftime("%H:%M:%S")
        print(f"[{timestamp}] {level.upper()}: {message}")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        if level in [LogLevel.CRITICAL, LogLevel.ERROR]:
            error_info = {
                "timestamp": timestamp,
                "level": level,
                "message": message,
                "category": category
            }
            
            if category == "build":
                self.build_errors.append(error_info)
            elif category == "app":
                self.app_errors.append(error_info)
            else:
                self.critical_errors.append(error_info)
    
    def check_deploy_status(self) -> Optional[str]:
        """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è —á–µ—Ä–µ–∑ MCP Render API"""
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ MCP API
            # –ü–æ–∫–∞ —Å–∏–º—É–ª–∏—Ä—É–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
            return "build_in_progress"  # –∏–ª–∏ "live", "update_failed", etc.
        except Exception as e:
            self.log_message(LogLevel.ERROR, f"–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è: {e}")
            return None
    
    def analyze_logs(self, logs: List[Dict]) -> Dict[str, List]:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –ª–æ–≥–∏ –∏ —Ñ–∏–ª—å—Ç—Ä—É–µ—Ç –ø–æ –≤–∞–∂–Ω–æ—Å—Ç–∏"""
        filtered_logs = {
            "critical": [],
            "errors": [],
            "warnings": [],
            "info": [],
            "build_issues": [],
            "app_issues": []
        }
        
        for log in logs:
            level = log.get("level", "info").lower()
            message = log.get("message", "")
            log_type = log.get("type", "app")
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–æ–∫
            if any(keyword in message.lower() for keyword in [
                "traceback", "exception", "fatal", "critical", 
                "indentationerror", "syntaxerror", "importerror"
            ]):
                filtered_logs["critical"].append(log)
                self.log_message(LogLevel.CRITICAL, f"–ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {message}", log_type)
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–æ–∫ —Å–±–æ—Ä–∫–∏
            elif log_type == "build" and level == "error":
                filtered_logs["build_issues"].append(log)
                self.log_message(LogLevel.ERROR, f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {message}", "build")
            
            # –§–∏–ª—å—Ç—Ä–∞—Ü–∏—è –æ—à–∏–±–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
            elif log_type == "app" and level == "error":
                filtered_logs["app_issues"].append(log)
                self.log_message(LogLevel.ERROR, f"–û—à–∏–±–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {message}", "app")
            
            # –û–±—ã—á–Ω—ã–µ –æ—à–∏–±–∫–∏
            elif level == "error":
                filtered_logs["errors"].append(log)
                self.log_message(LogLevel.ERROR, message)
            
            # –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è
            elif level == "warning":
                filtered_logs["warnings"].append(log)
                self.log_message(LogLevel.WARNING, message)
            
            # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω—ã–µ —Å–æ–æ–±—â–µ–Ω–∏—è
            elif level == "info":
                filtered_logs["info"].append(log)
                if "successful" in message.lower() or "build successful" in message.lower():
                    self.log_message(LogLevel.INFO, f"‚úÖ {message}")
        
        return filtered_logs
    
    def send_notification(self, level: str, message: str, details: Dict = None):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–π –æ—à–∏–±–∫–µ"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        
        notification = {
            "timestamp": timestamp,
            "level": level,
            "service_id": self.service_id,
            "deploy_id": self.deploy_id,
            "message": message,
            "details": details or {}
        }
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Slack, Discord, email –∏ —Ç.–¥.
        print(f"\nüö® –£–í–ï–î–û–ú–õ–ï–ù–ò–ï [{level.upper()}] üö®")
        print(f"–°–µ—Ä–≤–∏—Å: {self.service_id}")
        print(f"–î–µ–ø–ª–æ–π: {self.deploy_id}")
        print(f"–°–æ–æ–±—â–µ–Ω–∏–µ: {message}")
        if details:
            print(f"–î–µ—Ç–∞–ª–∏: {json.dumps(details, indent=2, ensure_ascii=False)}")
        print("=" * 60)
    
    def get_logs_summary(self) -> Dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Å–≤–æ–¥–∫—É –ø–æ –ª–æ–≥–∞–º"""
        return {
            "deploy_id": self.deploy_id,
            "service_id": self.service_id,
            "duration": str(datetime.now() - self.start_time),
            "critical_errors": len(self.critical_errors),
            "build_errors": len(self.build_errors),
            "app_errors": len(self.app_errors),
            "total_issues": len(self.critical_errors) + len(self.build_errors) + len(self.app_errors)
        }
    
    async def monitor_deployment(self, max_wait_minutes: int = 15):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–µ–ø–ª–æ—è"""
        self.log_message(LogLevel.INFO, f"–ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–ø–ª–æ—è {self.deploy_id}")
        self.log_message(LogLevel.INFO, f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è: {max_wait_minutes} –º–∏–Ω—É—Ç")
        
        end_time = datetime.now() + timedelta(minutes=max_wait_minutes)
        check_interval = 30  # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 30 —Å–µ–∫—É–Ω–¥
        last_log_count = 0
        
        while datetime.now() < end_time:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è
                status = self.check_deploy_status()
                if status:
                    self.log_message(LogLevel.INFO, f"–°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è: {status}")
                    
                    # –ï—Å–ª–∏ –¥–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–∏–ª—Å—è
                    if status in ["live", "update_failed", "build_failed"]:
                        self.log_message(LogLevel.INFO, f"–î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status}")
                        break
                
                # –ü–æ–ª—É—á–∞–µ–º –Ω–æ–≤—ã–µ –ª–æ–≥–∏ (–∑–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π MCP –≤—ã–∑–æ–≤)
                # –ü–æ–∫–∞ —Å–∏–º—É–ª–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ –ª–æ–≥–æ–≤
                await asyncio.sleep(check_interval)
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
                if self.critical_errors:
                    latest_error = self.critical_errors[-1]
                    self.send_notification(
                        LogLevel.CRITICAL,
                        f"–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {latest_error['message']}",
                        latest_error
                    )
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ—à–∏–±–∫–∏ —Å–±–æ—Ä–∫–∏
                if self.build_errors:
                    latest_build_error = self.build_errors[-1]
                    self.send_notification(
                        LogLevel.ERROR,
                        f"–û—à–∏–±–∫–∞ —Å–±–æ—Ä–∫–∏: {latest_build_error['message']}",
                        latest_build_error
                    )
                
            except KeyboardInterrupt:
                self.log_message(LogLevel.WARNING, "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                self.log_message(LogLevel.ERROR, f"–û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(10)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
        summary = self.get_logs_summary()
        self.log_message(LogLevel.INFO, "–ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –∑–∞–≤–µ—Ä—à–µ–Ω")
        self.log_message(LogLevel.INFO, f"–°–≤–æ–¥–∫–∞: {json.dumps(summary, indent=2, ensure_ascii=False)}")
        
        return summary

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python monitor_logs.py <service_id> <deploy_id> [max_wait_minutes]")
        print("–ü—Ä–∏–º–µ—Ä: python monitor_logs.py srv-d3bv87r7mgec73a336s0 dep-d3g3ld49c44c73a8cgk0 15")
        sys.exit(1)
    
    service_id = sys.argv[1]
    deploy_id = sys.argv[2]
    max_wait = int(sys.argv[3]) if len(sys.argv) > 3 else 15
    
    monitor = DeploymentMonitor(service_id, deploy_id)
    summary = await monitor.monitor_deployment(max_wait)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if summary["total_issues"] > 0:
        print(f"\n‚ùå –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —Å {summary['total_issues']} –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
        sys.exit(1)
    else:
        print(f"\n‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        sys.exit(0)

if __name__ == "__main__":
    asyncio.run(main())
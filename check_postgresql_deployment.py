#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é —Å PostgreSQL –Ω–∞ Render.com
"""
import os
import sys
import subprocess
from pathlib import Path

def check_file_exists(file_path, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞"""
    if Path(file_path).exists():
        print(f"‚úÖ {description}: {file_path}")
        return True
    else:
        print(f"‚ùå {description}: {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")
        return False

def check_requirements_file(file_path, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª requirements"""
    if not Path(file_path).exists():
        print(f"‚ùå {description}: {file_path} - –ù–ï –ù–ê–ô–î–ï–ù")
        return False
    
    with open(file_path, 'r', encoding='utf-8') as f:
        content = f.read()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ PostgreSQL –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    if 'psycopg2-binary' in content and 'sqlalchemy' in content:
        print(f"‚úÖ {description}: PostgreSQL –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã")
        return True
    else:
        print(f"‚ùå {description}: PostgreSQL –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –ù–ï –ù–ê–ô–î–ï–ù–´")
        return False

def check_web_application():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    files_to_check = [
        ("src/web/main_render.py", "–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
        ("src/web/database.py", "–ú–æ–¥—É–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"),
        ("src/web/models.py", "–ú–æ–¥–µ–ª–∏ SQLAlchemy"),
        ("src/web/routers/auth.py", "–†–æ—É—Ç–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"),
        ("src/web/routers/dashboard.py", "–†–æ—É—Ç–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞"),
        ("src/web/routers/posts.py", "–†–æ—É—Ç–µ—Ä –ø–æ—Å—Ç–æ–≤"),
        ("src/web/routers/settings.py", "–†–æ—É—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫"),
        ("src/web/routers/scheduler.py", "–†–æ—É—Ç–µ—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"),
    ]
    
    all_exist = True
    for file_path, description in files_to_check:
        if not check_file_exists(file_path, description):
            all_exist = False
    
    return all_exist

def check_celery_tasks():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Celery –∑–∞–¥–∞—á–∏"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Celery –∑–∞–¥–∞—á...")
    
    files_to_check = [
        ("src/tasks/celery_app.py", "Celery –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"),
        ("src/tasks/post_tasks.py", "–ó–∞–¥–∞—á–∏ –ø–æ—Å—Ç–æ–≤"),
        ("src/tasks/scheduler_tasks.py", "–ó–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"),
    ]
    
    all_exist = True
    for file_path, description in files_to_check:
        if not check_file_exists(file_path, description):
            all_exist = False
    
    return all_exist

def check_configuration_files():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    files_to_check = [
        ("render.yaml", "Render.com –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è"),
        ("env.example", "–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"),
        ("requirements_render.txt", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è Render.com"),
        ("Dockerfile.db", "Dockerfile –¥–ª—è PostgreSQL"),
    ]
    
    all_exist = True
    for file_path, description in files_to_check:
        if not check_file_exists(file_path, description):
            all_exist = False
    
    return all_exist

def check_postgresql_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é PostgreSQL"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ PostgreSQL...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º env.example
    if Path("env.example").exists():
        with open("env.example", 'r', encoding='utf-8') as f:
            content = f.read()
        
        postgres_vars = ['POSTGRES_HOST', 'POSTGRES_PORT', 'POSTGRES_DB', 'POSTGRES_USER', 'POSTGRES_PASSWORD']
        all_vars_found = all(var in content for var in postgres_vars)
        
        if all_vars_found:
            print("‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ PostgreSQL –Ω–∞–π–¥–µ–Ω—ã –≤ env.example")
        else:
            print("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ PostgreSQL –ù–ï –ù–ê–ô–î–ï–ù–´ –≤ env.example")
            return False
    else:
        print("‚ùå env.example –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º render.yaml
    if Path("render.yaml").exists():
        with open("render.yaml", 'r', encoding='utf-8') as f:
            content = f.read()
        
        if 'mikrokredit-db' in content and 'POSTGRES_' in content:
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL –Ω–∞–π–¥–µ–Ω–∞ –≤ render.yaml")
        else:
            print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL –ù–ï –ù–ê–ô–î–ï–ù–ê –≤ render.yaml")
            return False
    else:
        print("‚ùå render.yaml –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    return True

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ñ–∞–π–ª—ã requirements"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤ requirements...")
    
    files_to_check = [
        ("requirements_render.txt", "–ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –¥–ª—è Render.com"),
    ]
    
    all_good = True
    for file_path, description in files_to_check:
        if not check_requirements_file(file_path, description):
            all_good = False
    
    return all_good

def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Git"""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Å—Ç–∞—Ç—É—Å–∞...")
    
    try:
        result = subprocess.run(['git', 'status', '--porcelain'], 
                              capture_output=True, text=True, check=True)
        
        if result.stdout.strip():
            print("‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è –≤ Git")
            print("–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–¥–µ–ª–∞—Ç—å commit –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º")
            return False
        else:
            print("‚úÖ Git —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–π —á–∏—Å—Ç—ã–π")
            return True
    except subprocess.CalledProcessError:
        print("‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Git —Å—Ç–∞—Ç—É—Å–∞")
        return False
    except FileNotFoundError:
        print("‚ö†Ô∏è  Git –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
        return False

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏"""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é PostOpus —Å PostgreSQL –Ω–∞ Render.com")
    print("=" * 70)
    
    checks = [
        ("–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", check_web_application),
        ("Celery –∑–∞–¥–∞—á–∏", check_celery_tasks),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", check_configuration_files),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è PostgreSQL", check_postgresql_config),
        ("–§–∞–π–ª—ã requirements", check_requirements),
        ("Git —Å—Ç–∞—Ç—É—Å", check_git_status),
    ]
    
    all_passed = True
    
    for check_name, check_func in checks:
        if not check_func():
            all_passed = False
        print()
    
    print("=" * 70)
    
    if all_passed:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ Render.com")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –°–æ–∑–¥–∞–π—Ç–µ PostgreSQL –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö –Ω–∞ Render.com")
        print("2. –°–æ–∑–¥–∞–π—Ç–µ Redis —Å–µ—Ä–≤–∏—Å –Ω–∞ Render.com")
        print("3. –°–æ–∑–¥–∞–π—Ç–µ Web Service –Ω–∞ Render.com")
        print("4. –°–æ–∑–¥–∞–π—Ç–µ Background Workers –¥–ª—è Celery")
        print("5. –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("\nüìñ –ü–æ–¥—Ä–æ–±–Ω–∞—è –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è: POSTGRESQL_DEPLOYMENT.md")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–í–ï–†–ö–ò –ù–ï –ü–†–û–ô–î–ï–ù–´!")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –ø–µ—Ä–µ–¥ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ–º")
        sys.exit(1)

if __name__ == "__main__":
    main()

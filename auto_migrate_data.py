#!/usr/bin/env python3
"""
–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è –Ω–∞ Render.com
"""
import os
import json
import logging
from datetime import datetime
from typing import Dict, Any, List
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class AutoMigrator:
    """–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –º–∏–≥—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö."""
    
    def __init__(self):
        self.mongo_url = "mongodb+srv://valstan:nitro2000@postopus.qjxr9.mongodb.net/postopus?retryWrites=true&w=majority"
        self.mongo_client = None
        self.mongo_db = None
        
    def connect_mongo(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB."""
        try:
            self.mongo_client = MongoClient(self.mongo_url)
            self.mongo_db = self.mongo_client['postopus']
            self.mongo_client.admin.command('ping')
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
            return False
    
    def migrate_groups(self) -> int:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø —á–µ—Ä–µ–∑ API."""
        logger.info("üë• –ú–∏–≥—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ MongoDB
            config_collection = self.mongo_db['config']
            config_doc = config_collection.find_one({'title': 'config'})
            
            if not config_doc or 'all_my_groups' not in config_doc:
                logger.warning("‚ö†Ô∏è –ì—Ä—É–ø–ø—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return 0
            
            groups_data = config_doc['all_my_groups']
            migrated_count = 0
            
            # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å API –≤—ã–∑–æ–≤—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥—Ä—É–ø–ø
            # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
            for group_name, group_id in groups_data.items():
                logger.info(f"  üìù –ì—Ä—É–ø–ø–∞: {group_name} (ID: {group_id})")
                migrated_count += 1
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –≥—Ä—É–ø–ø –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: {migrated_count}")
            return migrated_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø: {e}")
            return 0
    
    def migrate_posts(self) -> int:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ —á–µ—Ä–µ–∑ API."""
        logger.info("üìù –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            collections = self.mongo_db.list_collection_names()
            post_collections = [col for col in collections if col not in [
                'users', 'settings', 'logs', 'statistics', 'health_checks', 
                'task_executions', 'tasks', 'config', 'deserter', 'bal'
            ]]
            
            migrated_count = 0
            
            for collection_name in post_collections:
                logger.info(f"  üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é: {collection_name}")
                
                collection = self.mongo_db[collection_name]
                documents = list(collection.find({}))
                
                for doc in documents:
                    # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å API –≤—ã–∑–æ–≤—ã –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ—Å—Ç–æ–≤
                    # –ü–æ–∫–∞ –ø—Ä–æ—Å—Ç–æ –ª–æ–≥–∏—Ä—É–µ–º
                    title = doc.get('title', f'Post from {collection_name}')
                    content = ' '.join(doc.get('lip', [])) if doc.get('lip') else ''
                    
                    logger.info(f"    üìù –ü–æ—Å—Ç: {title[:50]}...")
                    migrated_count += 1
                
                logger.info(f"  ‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name}: {len(documents)} –ø–æ—Å—Ç–æ–≤")
            
            logger.info(f"‚úÖ –ù–∞–π–¥–µ–Ω–æ –ø–æ—Å—Ç–æ–≤ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏: {migrated_count}")
            return migrated_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            return 0
    
    def create_migration_summary(self, groups_count: int, posts_count: int):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Å–≤–æ–¥–∫–∏ –º–∏–≥—Ä–∞—Ü–∏–∏."""
        summary = {
            "migration_timestamp": datetime.now().isoformat(),
            "groups_found": groups_count,
            "posts_found": posts_count,
            "status": "ready_for_migration",
            "next_steps": [
                "1. –†–∞–∑–≤–µ—Ä–Ω—É—Ç—å –ø—Ä–æ–µ–∫—Ç –Ω–∞ Render.com",
                "2. –°–æ–∑–¥–∞—Ç—å —Ç–∞–±–ª–∏—Ü—ã PostgreSQL",
                "3. –ó–∞–ø—É—Å—Ç–∏—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é —á–µ—Ä–µ–∑ API",
                "4. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–∞–Ω–Ω—ã–µ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ"
            ]
        }
        
        with open("migration_summary.json", "w", encoding="utf-8") as f:
            json.dump(summary, f, ensure_ascii=False, indent=2)
        
        logger.info("üìÑ –°–≤–æ–¥–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ migration_summary.json")
        return summary
    
    def run_analysis(self) -> Dict[str, Any]:
        """–ó–∞–ø—É—Å–∫ –∞–Ω–∞–ª–∏–∑–∞ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏."""
        logger.info("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏...")
        
        if not self.connect_mongo():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB")
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ
        groups_count = self.migrate_groups()
        posts_count = self.migrate_posts()
        
        # –°–æ–∑–¥–∞–µ–º —Å–≤–æ–¥–∫—É
        summary = self.create_migration_summary(groups_count, posts_count)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if self.mongo_client:
            self.mongo_client.close()
        
        logger.info("‚úÖ –ê–Ω–∞–ª–∏–∑ –∑–∞–≤–µ—Ä—à–µ–Ω!")
        return summary

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("ü§ñ –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ç–æ—Ä
        migrator = AutoMigrator()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑
        results = migrator.run_analysis()
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ê–ù–ê–õ–ò–ó–ê:")
        print("-" * 40)
        print(f"üë• –ì—Ä—É–ø–ø –Ω–∞–π–¥–µ–Ω–æ: {results['groups_found']}")
        print(f"üìù –ü–æ—Å—Ç–æ–≤ –Ω–∞–π–¥–µ–Ω–æ: {results['posts_found']}")
        print(f"üìÑ –°—Ç–∞—Ç—É—Å: {results['status']}")
        
        print("\nüìã –°–õ–ï–î–£–Æ–©–ò–ï –®–ê–ì–ò:")
        for step in results['next_steps']:
            print(f"  {step}")
        
        print(f"\nüìÑ –ü–æ–¥—Ä–æ–±–Ω–∞—è —Å–≤–æ–¥–∫–∞: migration_summary.json")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())

#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB –≤ PostgreSQL –ø–æ—Å–ª–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è
"""
import os
import sys
import logging
from datetime import datetime
from typing import Dict, Any, List
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

try:
    from pymongo import MongoClient
    from pymongo.errors import ConnectionFailure
    from sqlalchemy import create_engine, text
    from sqlalchemy.orm import sessionmaker
    from src.web.models import Post, Group, Schedule, User, Base
    from src.web.database import DATABASE_URL
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install pymongo sqlalchemy psycopg2-binary")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class DataMigrator:
    """–ú–∏–≥—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB –≤ PostgreSQL."""
    
    def __init__(self):
        self.mongo_url = "mongodb+srv://valstan:nitro2000@postopus.qjxr9.mongodb.net/postopus?retryWrites=true&w=majority"
        self.postgres_url = DATABASE_URL
        self.mongo_client = None
        self.mongo_db = None
        self.postgres_engine = None
        self.postgres_session = None
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        self.stats = {
            'groups': 0,
            'posts': 0,
            'errors': 0
        }
    
    def connect_mongo(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB."""
        try:
            self.mongo_client = MongoClient(self.mongo_url)
            self.mongo_db = self.mongo_client['postopus']
            self.mongo_client.admin.command('ping')
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
            return False
    
    def connect_postgres(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL."""
        try:
            self.postgres_engine = create_engine(self.postgres_url, echo=False)
            SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=self.postgres_engine)
            self.postgres_session = SessionLocal()
            
            with self.postgres_engine.connect() as connection:
                result = connection.execute(text("SELECT 1"))
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            return False
    
    def migrate_groups(self) -> int:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø –∏–∑ MongoDB –≤ PostgreSQL."""
        logger.info("üë• –ú–∏–≥—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ MongoDB
            config_collection = self.mongo_db['config']
            config_doc = config_collection.find_one({'title': 'config'})
            
            if not config_doc or 'all_my_groups' not in config_doc:
                logger.warning("‚ö†Ô∏è –ì—Ä—É–ø–ø—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return 0
            
            groups_data = config_doc['all_my_groups']
            migrated_count = 0
            
            for group_name, group_id in groups_data.items():
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ä–µ–≥–∏–æ–Ω –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã
                    region = self._extract_region_from_name(group_name)
                    
                    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —Å—É—â–µ—Å—Ç–≤—É–µ—Ç –ª–∏ —É–∂–µ –≥—Ä—É–ø–ø–∞
                    existing_group = self.postgres_session.query(Group).filter(
                        Group.name == group_name
                    ).first()
                    
                    if existing_group:
                        # –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –≥—Ä—É–ø–ø—É
                        existing_group.group_id = str(group_id)
                        existing_group.region = region
                        existing_group.updated_at = datetime.utcnow()
                        existing_group.settings = {
                            'mongo_source': 'config.all_my_groups',
                            'original_id': group_id,
                            'migrated_at': datetime.utcnow().isoformat()
                        }
                        logger.info(f"  üîÑ –û–±–Ω–æ–≤–ª–µ–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_name}")
                    else:
                        # –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é –≥—Ä—É–ø–ø—É
                        group = Group(
                            name=group_name,
                            platform='vk',
                            group_id=str(group_id),
                            region=region,
                            is_active=True,
                            created_at=datetime.utcnow(),
                            updated_at=datetime.utcnow(),
                            settings={
                                'mongo_source': 'config.all_my_groups',
                                'original_id': group_id,
                                'migrated_at': datetime.utcnow().isoformat()
                            }
                        )
                        
                        self.postgres_session.add(group)
                        logger.info(f"  ‚ûï –°–æ–∑–¥–∞–Ω–∞ –≥—Ä—É–ø–ø–∞: {group_name}")
                    
                    migrated_count += 1
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã {group_name}: {e}")
                    self.stats['errors'] += 1
                    continue
            
            self.postgres_session.commit()
            logger.info(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –≥—Ä—É–ø–ø: {migrated_count}")
            return migrated_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø: {e}")
            self.postgres_session.rollback()
            return 0
    
    def migrate_posts(self) -> int:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ MongoDB –≤ PostgreSQL."""
        logger.info("üìù –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            collections = self.mongo_db.list_collection_names()
            post_collections = [col for col in collections if col not in [
                'users', 'settings', 'logs', 'statistics', 'health_checks', 
                'task_executions', 'tasks', 'config', 'deserter', 'bal'
            ]]
            
            migrated_count = 0
            
            for collection_name in post_collections:
                logger.info(f"  üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é: {collection_name}")
                
                collection = self.mongo_db[collection_name]
                documents = list(collection.find({}))
                
                for doc in documents:
                    try:
                        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
                        post = self._create_post_from_document(doc, collection_name)
                        
                        if post:
                            self.postgres_session.add(post)
                            migrated_count += 1
                            
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –∏–∑ {collection_name}: {e}")
                        self.stats['errors'] += 1
                        continue
                
                logger.info(f"  ‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name}: {len(documents)} –ø–æ—Å—Ç–æ–≤")
            
            self.postgres_session.commit()
            logger.info(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {migrated_count}")
            return migrated_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            self.postgres_session.rollback()
            return 0
    
    def _extract_region_from_name(self, group_name: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã."""
        region_mapping = {
            'mi': '–ú–∞–ª–º—ã–∂',
            'nolinsk': '–ù–æ–ª–∏–Ω—Å–∫',
            'arbazh': '–ê—Ä–±–∞–∂',
            'nema': '–ù–µ–º–∞',
            'ur': '–£—Ä–∂—É–º',
            'verhoshizhem': '–í–µ—Ä—Ö–æ—à–∏–∂–µ–º—å–µ',
            'klz': '–ö–∏–ª—å–º–µ–∑—å',
            'pizhanka': '–ü–∏–∂–∞–Ω–∫–∞',
            'kukmor': '–ö—É–∫–º–æ—Ä',
            'sovetsk': '–°–æ–≤–µ—Ç—Å–∫',
            'vp': '–í—è—Ç—Å–∫–∏–µ –ü–æ–ª—è–Ω—ã',
            'leb': '–õ–µ–±—è–∂—å–µ',
            'dran': '–î—Ä–∞–Ω',
            'bal': '–ë–∞–ª—Ç–∞—Å–∏'
        }
        
        for key, region in region_mapping.items():
            if key in group_name.lower():
                return region
        
        return group_name
    
    def _create_post_from_document(self, doc: Dict[str, Any], collection_name: str) -> Post:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Post –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ MongoDB."""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞
            content = ""
            if 'lip' in doc and isinstance(doc['lip'], list):
                content = " ".join(str(item) for item in doc['lip'])
            elif 'text' in doc:
                content = str(doc['text'])
            elif 'content' in doc:
                content = str(doc['content'])
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title = doc.get('title', f'Post from {collection_name}')
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥—Ä—É–ø–ø—ã
            vk_groups = []
            if 'post_group_vk' in doc:
                vk_groups = doc['post_group_vk'] if isinstance(doc['post_group_vk'], list) else [doc['post_group_vk']]
            
            telegram_groups = []
            if 'post_group_telega' in doc:
                telegram_groups = doc['post_group_telega'] if isinstance(doc['post_group_telega'], list) else [doc['post_group_telega']]
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
            post = Post(
                title=title,
                content=content,
                image_url=None,
                video_url=None,
                status='published',
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow(),
                scheduled_at=None,
                published_at=datetime.utcnow(),
                vk_group_id=str(vk_groups[0]) if vk_groups else None,
                telegram_chat_id=str(telegram_groups[0]) if telegram_groups else None,
                region=self._extract_region_from_name(collection_name),
                source_collection=collection_name,
                metadata={
                    'mongo_collection': collection_name,
                    'mongo_id': str(doc.get('_id')),
                    'vk_groups': vk_groups,
                    'telegram_groups': telegram_groups,
                    'migrated_at': datetime.utcnow().isoformat(),
                    'original_data': {
                        k: v for k, v in doc.items() 
                        if k not in ['_id', 'title', 'lip', 'text', 'content', 'post_group_vk', 'post_group_telega']
                    }
                }
            )
            
            return post
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            return None
    
    def run_migration(self) -> Dict[str, int]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏."""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
        if not self.connect_mongo():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB")
        
        if not self.connect_postgres():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        self.stats['groups'] = self.migrate_groups()
        self.stats['posts'] = self.migrate_posts()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if self.mongo_client:
            self.mongo_client.close()
        if self.postgres_session:
            self.postgres_session.close()
        
        logger.info("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return self.stats

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üîÑ –ú–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB –≤ PostgreSQL")
    print("=" * 60)
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ç–æ—Ä
        migrator = DataMigrator()
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        results = migrator.run_migration()
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò:")
        print("-" * 40)
        print(f"üë• –ì—Ä—É–ø–ø –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {results['groups']}")
        print(f"üìù –ü–æ—Å—Ç–æ–≤ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {results['posts']}")
        if results['errors'] > 0:
            print(f"‚ùå –û—à–∏–±–æ–∫: {results['errors']}")
        
        total = results['groups'] + results['posts']
        print(f"\n‚úÖ –í—Å–µ–≥–æ –∑–∞–ø–∏—Å–µ–π –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ: {total}")
        
        if total > 0:
            print("\nüéâ –ú–∏–≥—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
            print("üåê –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–∞–Ω–Ω—ã–µ –≤ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–µ")
        else:
            print("\n‚ö†Ô∏è –î–∞–Ω–Ω—ã–µ –Ω–µ –±—ã–ª–∏ –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())

#!/usr/bin/env python3
"""
–£–º–Ω—ã–π —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB –≤ PostgreSQL –Ω–∞ –æ—Å–Ω–æ–≤–µ –∞–Ω–∞–ª–∏–∑–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö.
"""
import json
import logging
from datetime import datetime
from typing import Dict, Any, List, Optional
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure
from sqlalchemy import create_engine, text
from sqlalchemy.orm import sessionmaker
from src.web.models import Post, Group, Schedule, User, Base
from src.web.database import DATABASE_URL

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class SmartMongoToPostgresMigrator:
    """–£–º–Ω—ã–π –º–∏–≥—Ä–∞—Ç–æ—Ä –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB –≤ PostgreSQL."""
    
    def __init__(self, mongo_url: str, postgres_url: str = None):
        self.mongo_url = mongo_url
        self.postgres_url = postgres_url or DATABASE_URL
        self.mongo_client = None
        self.mongo_db = None
        self.postgres_engine = None
        self.postgres_session = None
        
        # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏
        self.migration_stats = {
            'posts': 0,
            'groups': 0,
            'users': 0,
            'schedules': 0,
            'errors': 0
        }
        
    def connect_mongo(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB."""
        try:
            self.mongo_client = MongoClient(self.mongo_url)
            self.mongo_db = self.mongo_client['postopus']
            self.mongo_client.admin.command('ping')
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
            return False
    
    def connect_postgres(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL."""
        try:
            self.postgres_engine = create_engine(self.postgres_url, echo=False)
            SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=self.postgres_engine)
            self.postgres_session = SessionLocal()
            
            with self.postgres_engine.connect() as connection:
                result = connection.execute(text("SELECT 1"))
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            return False
    
    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL."""
        logger.info("üîÑ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL...")
        try:
            Base.metadata.create_all(bind=self.postgres_engine)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
            raise
    
    def migrate_groups_from_config(self) -> int:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        logger.info("üë• –ú–∏–≥—Ä–∏—Ä—É–µ–º –≥—Ä—É–ø–ø—ã –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        
        try:
            config_collection = self.mongo_db['config']
            config_doc = config_collection.find_one({'title': 'config'})
            
            if not config_doc or 'all_my_groups' not in config_doc:
                logger.warning("‚ö†Ô∏è –ì—Ä—É–ø–ø—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return 0
            
            groups_data = config_doc['all_my_groups']
            migrated_count = 0
            
            for group_name, group_id in groups_data.items():
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –ø–æ ID –≥—Ä—É–ø–ø—ã
                    platform = 'vk' if str(group_id).startswith('-') else 'vk'
                    
                    group = Group(
                        name=group_name,
                        platform=platform,
                        group_id=str(group_id),
                        access_token=None,
                        is_active=True,
                        created_at=datetime.utcnow(),
                        updated_at=datetime.utcnow(),
                        settings={
                            'mongo_source': 'config.all_my_groups',
                            'original_id': group_id,
                            'region': self._extract_region_from_group_name(group_name)
                        }
                    )
                    
                    self.postgres_session.add(group)
                    migrated_count += 1
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã {group_name}: {e}")
                    self.migration_stats['errors'] += 1
                    continue
            
            self.postgres_session.commit()
            logger.info(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –≥—Ä—É–ø–ø: {migrated_count}")
            return migrated_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø: {e}")
            self.postgres_session.rollback()
            return 0
    
    def _extract_region_from_group_name(self, group_name: str) -> str:
        """–ò–∑–≤–ª–µ—á–µ–Ω–∏–µ —Ä–µ–≥–∏–æ–Ω–∞ –∏–∑ –Ω–∞–∑–≤–∞–Ω–∏—è –≥—Ä—É–ø–ø—ã."""
        # –ü—Ä–æ—Å—Ç–∞—è –ª–æ–≥–∏–∫–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ä–µ–≥–∏–æ–Ω–∞
        region_mapping = {
            'mi': '–ú–∞–ª–º—ã–∂',
            'nolinsk': '–ù–æ–ª–∏–Ω—Å–∫',
            'arbazh': '–ê—Ä–±–∞–∂',
            'nema': '–ù–µ–º–∞',
            'ur': '–£—Ä–∂—É–º',
            'verhoshizhem': '–í–µ—Ä—Ö–æ—à–∏–∂–µ–º—å–µ',
            'klz': '–ö–∏–ª—å–º–µ–∑—å',
            'pizhanka': '–ü–∏–∂–∞–Ω–∫–∞',
            'kukmor': '–ö—É–∫–º–æ—Ä',
            'sovetsk': '–°–æ–≤–µ—Ç—Å–∫',
            'vp': '–í—è—Ç—Å–∫–∏–µ –ü–æ–ª—è–Ω—ã',
            'leb': '–õ–µ–±—è–∂—å–µ',
            'dran': '–î—Ä–∞–Ω',
            'bal': '–ë–∞–ª—Ç–∞—Å–∏'
        }
        
        for key, region in region_mapping.items():
            if key in group_name.lower():
                return region
        
        return group_name
    
    def migrate_posts_from_collections(self) -> int:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ –≤—Å–µ—Ö –∫–æ–ª–ª–µ–∫—Ü–∏–π."""
        logger.info("üìù –ú–∏–≥—Ä–∏—Ä—É–µ–º –ø–æ—Å—Ç—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–π...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            collections = self.mongo_db.list_collection_names()
            
            # –ò—Å–∫–ª—é—á–∞–µ–º —Å–ª—É–∂–µ–±–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
            post_collections = [col for col in collections if col not in [
                'users', 'settings', 'logs', 'statistics', 'health_checks', 
                'task_executions', 'tasks', 'config', 'deserter', 'bal'
            ]]
            
            migrated_count = 0
            
            for collection_name in post_collections:
                logger.info(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é: {collection_name}")
                
                collection = self.mongo_db[collection_name]
                documents = list(collection.find({}))
                
                for doc in documents:
                    try:
                        # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
                        post = self._create_post_from_document(doc, collection_name)
                        
                        if post:
                            self.postgres_session.add(post)
                            migrated_count += 1
                            
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–∞ –∏–∑ {collection_name}: {e}")
                        self.migration_stats['errors'] += 1
                        continue
                
                logger.info(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            
            self.postgres_session.commit()
            logger.info(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ –ø–æ—Å—Ç–æ–≤: {migrated_count}")
            return migrated_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            self.postgres_session.rollback()
            return 0
    
    def _create_post_from_document(self, doc: Dict[str, Any], collection_name: str) -> Optional[Post]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –æ–±—ä–µ–∫—Ç–∞ Post –∏–∑ –¥–æ–∫—É–º–µ–Ω—Ç–∞ MongoDB."""
        try:
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —Ç–µ–∫—Å—Ç –ø–æ—Å—Ç–∞ –∏–∑ –ø–æ–ª—è 'lip' (–æ—Å–Ω–æ–≤–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ)
            content = ""
            if 'lip' in doc and isinstance(doc['lip'], list):
                content = " ".join(str(item) for item in doc['lip'])
            elif 'text' in doc:
                content = str(doc['text'])
            elif 'content' in doc:
                content = str(doc['content'])
            
            # –°–æ–∑–¥–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫
            title = doc.get('title', f'Post from {collection_name}')
            
            # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å—Ç–∞—Ç—É—Å
            status = 'published'  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º, —á—Ç–æ –≤—Å–µ –ø–æ—Å—Ç—ã –æ–ø—É–±–ª–∏–∫–æ–≤–∞–Ω—ã
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥—Ä—É–ø–ø—ã VK
            vk_groups = []
            if 'post_group_vk' in doc:
                vk_groups = doc['post_group_vk'] if isinstance(doc['post_group_vk'], list) else [doc['post_group_vk']]
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º –≥—Ä—É–ø–ø—ã Telegram
            telegram_groups = []
            if 'post_group_telega' in doc:
                telegram_groups = doc['post_group_telega'] if isinstance(doc['post_group_telega'], list) else [doc['post_group_telega']]
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ—Å—Ç
            post = Post(
                title=title,
                content=content,
                image_url=None,  # –í –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –Ω–µ—Ç –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
                video_url=None,  # –í –¥–∞–Ω–Ω–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä–µ –Ω–µ—Ç –≤–∏–¥–µ–æ
                status=status,
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow(),
                scheduled_at=None,
                published_at=datetime.utcnow(),
                vk_group_id=str(vk_groups[0]) if vk_groups else None,
                telegram_chat_id=str(telegram_groups[0]) if telegram_groups else None,
                metadata={
                    'mongo_collection': collection_name,
                    'mongo_id': str(doc.get('_id')),
                    'region': self._extract_region_from_group_name(collection_name),
                    'vk_groups': vk_groups,
                    'telegram_groups': telegram_groups,
                    'original_data': {
                        k: v for k, v in doc.items() 
                        if k not in ['_id', 'title', 'lip', 'text', 'content', 'post_group_vk', 'post_group_telega']
                    }
                }
            )
            
            return post
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ—Å—Ç–∞: {e}")
            return None
    
    def create_default_admin_user(self) -> int:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é."""
        logger.info("üë§ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
        
        try:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
            existing_users = self.postgres_session.query(User).count()
            if existing_users > 0:
                logger.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ")
                return 0
            
            # –°–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
            admin_user = User(
                username="admin",
                email="admin@postopus.local",
                hashed_password="admin",  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ —Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å
                is_active=True,
                is_admin=True,
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow()
            )
            
            self.postgres_session.add(admin_user)
            self.postgres_session.commit()
            
            logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
            return 1
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
            self.postgres_session.rollback()
            return 0
    
    def migrate_schedules_from_tasks(self) -> int:
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∏–∑ –∑–∞–¥–∞—á."""
        logger.info("‚è∞ –ú–∏–≥—Ä–∏—Ä—É–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∏–∑ –∑–∞–¥–∞—á...")
        
        try:
            tasks_collection = self.mongo_db['tasks']
            tasks = list(tasks_collection.find({}))
            
            if not tasks:
                logger.info("‚ö†Ô∏è –ó–∞–¥–∞—á–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
                return 0
            
            migrated_count = 0
            
            for task_doc in tasks:
                try:
                    schedule = Schedule(
                        name=task_doc.get('name', f'Task {task_doc.get("id", "unknown")}'),
                        cron_expression=task_doc.get('cron', '0 0 * * *'),
                        is_active=task_doc.get('enabled', True),
                        created_at=task_doc.get('created_at', datetime.utcnow()),
                        updated_at=task_doc.get('updated_at', datetime.utcnow()),
                        last_run=task_doc.get('last_run'),
                        next_run=task_doc.get('next_run'),
                        settings={
                            'mongo_id': str(task_doc.get('_id')),
                            'original_data': task_doc
                        }
                    )
                    
                    self.postgres_session.add(schedule)
                    migrated_count += 1
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
                    self.migration_stats['errors'] += 1
                    continue
            
            self.postgres_session.commit()
            logger.info(f"‚úÖ –ú–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω–æ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {migrated_count}")
            return migrated_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {e}")
            self.postgres_session.rollback()
            return 0
    
    def run_migration(self) -> Dict[str, int]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏."""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º —É–º–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
        if not self.connect_mongo():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB")
        
        if not self.connect_postgres():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        self.create_tables()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        self.migration_stats['groups'] = self.migrate_groups_from_config()
        self.migration_stats['posts'] = self.migrate_posts_from_collections()
        self.migration_stats['users'] = self.create_default_admin_user()
        self.migration_stats['schedules'] = self.migrate_schedules_from_tasks()
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if self.mongo_client:
            self.mongo_client.close()
        if self.postgres_session:
            self.postgres_session.close()
        
        logger.info("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return self.migration_stats

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üß† –£–º–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB –≤ PostgreSQL")
    print("=" * 60)
    
    # URL MongoDB
    mongo_url = "mongodb+srv://valstan:nitro2000@postopus.qjxr9.mongodb.net/postopus?retryWrites=true&w=majority"
    
    # URL PostgreSQL (–º–æ–∂–Ω–æ –∏–∑–º–µ–Ω–∏—Ç—å)
    postgres_url = input("–í–≤–µ–¥–∏—Ç–µ URL PostgreSQL (Enter –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é): ").strip()
    if not postgres_url:
        postgres_url = None
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ç–æ—Ä
        migrator = SmartMongoToPostgresMigrator(mongo_url, postgres_url)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        results = migrator.run_migration()
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –ú–ò–ì–†–ê–¶–ò–ò:")
        print("-" * 40)
        for table, count in results.items():
            if table != 'errors':
                print(f"  {table}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        if results['errors'] > 0:
            print(f"  ‚ö†Ô∏è –æ—à–∏–±–æ–∫: {results['errors']}")
        
        total = sum(v for k, v in results.items() if k != 'errors')
        print(f"\n‚úÖ –í—Å–µ–≥–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {total} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())

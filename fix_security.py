#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –≤ Postopus.
"""
import os
import sys
import re
from pathlib import Path
from typing import List, Dict, Any


class SecurityFixer:
    """–ö–ª–∞—Å—Å –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
    
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.secrets_found = []
        self.files_to_fix = []
    
    def fix_security_issues(self) -> None:
        """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
        print("üîí –ù–∞—á–∏–Ω–∞–µ–º –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        try:
            # 1. –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã –≤ –∫–æ–¥–µ
            self.find_secrets()
            
            # 2. –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
            self.create_env_file()
            
            # 3. –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
            self.update_code_for_env_vars()
            
            # 4. –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤
            self.create_secrets_migration_script()
            
            # 5. –°–æ–∑–¥–∞–µ–º .gitignore –¥–ª—è –∑–∞—â–∏—Ç—ã —Å–µ–∫—Ä–µ—Ç–æ–≤
            self.create_gitignore()
            
            print("‚úÖ –ü—Ä–æ–±–ª–µ–º—ã –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã!")
            print("üìù –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ñ–∞–π–ª SECURITY_FIXES.md –¥–ª—è –¥–µ—Ç–∞–ª–µ–π")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: {e}")
            sys.exit(1)
    
    def find_secrets(self) -> None:
        """–ù–∞—Ö–æ–¥–∏—Ç —Å–µ–∫—Ä–µ—Ç—ã –≤ –∫–æ–¥–µ."""
        print("üîç –ò—â–µ–º —Å–µ–∫—Ä–µ—Ç—ã –≤ –∫–æ–¥–µ...")
        
        # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
        secret_patterns = [
            r'["\']([A-Za-z0-9+/]{40,})["\']',  # Base64 —Ç–æ–∫–µ–Ω—ã
            r'["\']([A-Za-z0-9]{32,})["\']',    # MD5 —Ö–µ—à–∏
            r'["\']([A-Za-z0-9]{64,})["\']',    # SHA256 —Ö–µ—à–∏
            r'token["\']?\s*[:=]\s*["\']([^"\']+)["\']',  # –¢–æ–∫–µ–Ω—ã
            r'password["\']?\s*[:=]\s*["\']([^"\']+)["\']',  # –ü–∞—Ä–æ–ª–∏
            r'api_key["\']?\s*[:=]\s*["\']([^"\']+)["\']',  # API –∫–ª—é—á–∏
            r'mongodb://[^"\']+',  # MongoDB URL
            r'postgres://[^"\']+',  # PostgreSQL URL
        ]
        
        for file_path in self.project_root.rglob("*.py"):
            if file_path.name.startswith('.'):
                continue
            
            try:
                with open(file_path, 'r', encoding='utf-8') as f:
                    content = f.read()
                
                for pattern in secret_patterns:
                    matches = re.findall(pattern, content, re.IGNORECASE)
                    for match in matches:
                        if len(match) > 10:  # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º –∫–æ—Ä–æ—Ç–∫–∏–µ —Å–æ–≤–ø–∞–¥–µ–Ω–∏—è
                            self.secrets_found.append({
                                'file': str(file_path),
                                'pattern': pattern,
                                'match': match[:20] + '...' if len(match) > 20 else match
                            })
                            
            except Exception as e:
                print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
    
    def create_env_file(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª —Å —à–∞–±–ª–æ–Ω–æ–º."""
        print("üìù –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª...")
        
        env_content = """# Database configuration
MONGO_CLIENT=mongodb://localhost:27017/

# VK API tokens (comma-separated)
VK_TOKENS=your_vk_token_1,your_vk_token_2
VK_READ_TOKENS=your_read_token_1,your_read_token_2
VK_POST_TOKENS=your_post_token_1,your_post_token_2
VK_REPOST_TOKENS=your_repost_token_1,your_repost_token_2

# Telegram configuration
TELEGRAM_BOT_TOKEN=your_bot_token
TELEGRAM_CHAT_ID=your_chat_id

# Application settings
LOG_LEVEL=INFO
LOG_FILE=logs/postopus.log

# Security settings
SECRET_KEY=your_secret_key_here
ENCRYPTION_KEY=your_encryption_key_here
"""
        
        env_file = self.project_root / ".env"
        with open(env_file, "w", encoding="utf-8") as f:
            f.write(env_content)
        
        # –°–æ–∑–¥–∞–µ–º .env.example
        example_file = self.project_root / ".env.example"
        with open(example_file, "w", encoding="utf-8") as f:
            f.write(env_content)
    
    def update_code_for_env_vars(self) -> None:
        """–û–±–Ω–æ–≤–ª—è–µ—Ç –∫–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è."""
        print("üîÑ –û–±–Ω–æ–≤–ª—è–µ–º –∫–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        # –°–æ–∑–¥–∞–µ–º –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        env_loader = '''"""
–ú–æ–¥—É–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è.
"""
import os
from pathlib import Path
from typing import Dict, Any

def load_env_file(env_file: str = ".env") -> Dict[str, str]:
    """
    –ó–∞–≥—Ä—É–∂–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ —Ñ–∞–π–ª–∞.
    
    Args:
        env_file: –ü—É—Ç—å –∫ —Ñ–∞–π–ª—É .env
        
    Returns:
        –°–ª–æ–≤–∞—Ä—å —Å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–º–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    """
    env_vars = {}
    env_path = Path(env_file)
    
    if env_path.exists():
        with open(env_path, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key.strip()] = value.strip()
    
    return env_vars

def get_env_var(key: str, default: str = None) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    
    Args:
        key: –ö–ª—é—á –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        default: –ó–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        
    Returns:
        –ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
    """
    return os.getenv(key, default)

def get_required_env_var(key: str) -> str:
    """
    –ü–æ–ª—É—á–∞–µ—Ç –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è.
    
    Args:
        key: –ö–ª—é—á –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        
    Returns:
        –ó–Ω–∞—á–µ–Ω–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω–æ–π
        
    Raises:
        ValueError: –ï—Å–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω–∞—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞
    """
    value = os.getenv(key)
    if not value:
        raise ValueError(f"Required environment variable {key} not found")
    return value
'''
        
        env_loader_file = self.project_root / "src" / "utils" / "env_loader.py"
        env_loader_file.parent.mkdir(parents=True, exist_ok=True)
        with open(env_loader_file, "w", encoding="utf-8") as f:
            f.write(env_loader)
    
    def create_secrets_migration_script(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤."""
        print("üîê –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤...")
        
        migration_script = '''#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤ –∏–∑ –∫–æ–¥–∞ –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è.
"""
import os
import re
import sys
from pathlib import Path
from typing import Dict, List

def migrate_secrets():
    """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç —Å–µ–∫—Ä–µ—Ç—ã –∏–∑ –∫–æ–¥–∞ –≤ .env —Ñ–∞–π–ª."""
    
    # –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –Ω–∞–π–¥–µ–Ω–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤
    secrets = {}
    
    # –ü–∞—Ç—Ç–µ—Ä–Ω—ã –¥–ª—è –ø–æ–∏—Å–∫–∞ —Å–µ–∫—Ä–µ—Ç–æ–≤
    secret_patterns = {
        'VK_TOKENS': r'VK_TOKEN_[A-Z_]+["\']?\s*[:=]\s*["\']([^"\']+)["\']',
        'TELEGRAM_BOT_TOKEN': r'TELEGA_TOKEN_[A-Z_]+["\']?\s*[:=]\s*["\']([^"\']+)["\']',
        'TELEGRAM_CHAT_ID': r'TELEGA_CHAT_ID["\']?\s*[:=]\s*["\']([^"\']+)["\']',
        'MONGO_CLIENT': r'MONGO_CLIENT["\']?\s*[:=]\s*["\']([^"\']+)["\']',
    }
    
    # –ò—â–µ–º —Å–µ–∫—Ä–µ—Ç—ã –≤ —Ñ–∞–π–ª–∞—Ö
    for file_path in Path('.').rglob("*.py"):
        if file_path.name.startswith('.'):
            continue
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
            
            for key, pattern in secret_patterns.items():
                matches = re.findall(pattern, content, re.IGNORECASE)
                for match in matches:
                    if key not in secrets:
                        secrets[key] = []
                    if match not in secrets[key]:
                        secrets[key].append(match)
                        
        except Exception as e:
            print(f"‚ö†Ô∏è –û—à–∏–±–∫–∞ –ø—Ä–∏ —á—Ç–µ–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file_path}: {e}")
    
    # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
    env_content = "# Database configuration\\n"
    env_content += f"MONGO_CLIENT={secrets.get('MONGO_CLIENT', ['mongodb://localhost:27017/'])[0]}\\n\\n"
    
    env_content += "# VK API tokens\\n"
    vk_tokens = secrets.get('VK_TOKENS', [])
    if vk_tokens:
        env_content += f"VK_TOKENS={','.join(vk_tokens)}\\n"
        env_content += f"VK_READ_TOKENS={','.join(vk_tokens)}\\n"
        env_content += f"VK_POST_TOKENS={','.join(vk_tokens)}\\n"
        env_content += f"VK_REPOST_TOKENS={','.join(vk_tokens)}\\n\\n"
    
    env_content += "# Telegram configuration\\n"
    telegram_token = secrets.get('TELEGRAM_BOT_TOKEN', [])
    if telegram_token:
        env_content += f"TELEGRAM_BOT_TOKEN={telegram_token[0]}\\n"
    
    telegram_chat = secrets.get('TELEGRAM_CHAT_ID', [])
    if telegram_chat:
        env_content += f"TELEGRAM_CHAT_ID={telegram_chat[0]}\\n"
    
    env_content += "\\n# Application settings\\n"
    env_content += "LOG_LEVEL=INFO\\n"
    env_content += "LOG_FILE=logs/postopus.log\\n"
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º .env —Ñ–∞–π–ª
    with open('.env', 'w', encoding='utf-8') as f:
        f.write(env_content)
    
    print("‚úÖ –°–µ–∫—Ä–µ—Ç—ã –º–∏–≥—Ä–∏—Ä–æ–≤–∞–Ω—ã –≤ .env —Ñ–∞–π–ª")
    print("üîí –ù–µ –∑–∞–±—É–¥—å—Ç–µ –¥–æ–±–∞–≤–∏—Ç—å .env –≤ .gitignore!")

if __name__ == "__main__":
    migrate_secrets()
'''
        
        migration_file = self.project_root / "migrate_secrets.py"
        with open(migration_file, "w", encoding="utf-8") as f:
            f.write(migration_script)
        
        # –î–µ–ª–∞–µ–º —Ñ–∞–π–ª –∏—Å–ø–æ–ª–Ω—è–µ–º—ã–º
        os.chmod(migration_file, 0o755)
    
    def create_gitignore(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç .gitignore –¥–ª—è –∑–∞—â–∏—Ç—ã —Å–µ–∫—Ä–µ—Ç–æ–≤."""
        print("üìù –°–æ–∑–¥–∞–µ–º .gitignore...")
        
        gitignore_content = """# Environment variables
.env
.env.local
.env.production
.env.staging

# Logs
logs/
*.log

# Temporary files
temp_images/
*.tmp
*.temp

# Python
__pycache__/
*.py[cod]
*$py.class
*.so
.Python
build/
develop-eggs/
dist/
downloads/
eggs/
.eggs/
lib/
lib64/
parts/
sdist/
var/
wheels/
*.egg-info/
.installed.cfg
*.egg

# Virtual environments
venv/
env/
ENV/

# IDE
.vscode/
.idea/
*.swp
*.swo

# OS
.DS_Store
Thumbs.db

# Backup files
backup_original/
*.bak
*.backup

# AI models
*.h5
*.pkl
*.pickle

# Database
*.db
*.sqlite
*.sqlite3
"""
        
        gitignore_file = self.project_root / ".gitignore"
        with open(gitignore_file, "w", encoding="utf-8") as f:
            f.write(gitignore_content)
    
    def create_security_report(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏."""
        print("üìä –°–æ–∑–¥–∞–µ–º –æ—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏...")
        
        report_content = f"""# –û—Ç—á–µ—Ç –æ –ø—Ä–æ–±–ª–µ–º–∞—Ö –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏

## –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã

–í—Å–µ–≥–æ –Ω–∞–π–¥–µ–Ω–æ –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ–∫—Ä–µ—Ç–æ–≤: {len(self.secrets_found)}

### –î–µ—Ç–∞–ª–∏:

"""
        
        for secret in self.secrets_found:
            report_content += f"- **–§–∞–π–ª**: `{secret['file']}`\n"
            report_content += f"  - **–ü–∞—Ç—Ç–µ—Ä–Ω**: `{secret['pattern']}`\n"
            report_content += f"  - **–ù–∞–π–¥–µ–Ω–æ**: `{secret['match']}`\n\n"
        
        report_content += """## –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—é

1. **–ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ**:
   - –ó–∞–º–µ–Ω–∏—Ç–µ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ —Å–µ–∫—Ä–µ—Ç—ã –Ω–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
   - –î–æ–±–∞–≤—å—Ç–µ .env –≤ .gitignore
   - –°–º–µ–Ω–∏—Ç–µ –≤—Å–µ –ø–∞—Ä–æ–ª–∏ –∏ —Ç–æ–∫–µ–Ω—ã

2. **–í –±–ª–∏–∂–∞–π—à–µ–µ –≤—Ä–µ–º—è**:
   - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —Ä–æ—Ç–∞—Ü–∏—é —Å–µ–∫—Ä–µ—Ç–æ–≤
   - –î–æ–±–∞–≤—å—Ç–µ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ —É—Ç–µ—á–µ–∫
   - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ —à–∏—Ñ—Ä–æ–≤–∞–Ω–∏–µ —á—É–≤—Å—Ç–≤–∏—Ç–µ–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö

3. **–î–æ–ª–≥–æ—Å—Ä–æ—á–Ω–æ**:
   - –í–Ω–µ–¥—Ä–∏—Ç–µ —Å–∏—Å—Ç–µ–º—É —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è —Å–µ–∫—Ä–µ—Ç–∞–º–∏ (HashiCorp Vault, AWS Secrets Manager)
   - –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫—É—é —Ä–æ—Ç–∞—Ü–∏—é —Ç–æ–∫–µ–Ω–æ–≤
   - –î–æ–±–∞–≤—å—Ç–µ –∞—É–¥–∏—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–µ–∫—Ä–µ—Ç–∞–º

## –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è

- ‚úÖ –°–æ–∑–¥–∞–Ω .env —Ñ–∞–π–ª —Å —à–∞–±–ª–æ–Ω–æ–º
- ‚úÖ –°–æ–∑–¥–∞–Ω .gitignore –¥–ª—è –∑–∞—â–∏—Ç—ã —Å–µ–∫—Ä–µ—Ç–æ–≤
- ‚úÖ –°–æ–∑–¥–∞–Ω —Å–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ —Å–µ–∫—Ä–µ—Ç–æ–≤
- ‚úÖ –°–æ–∑–¥–∞–Ω –º–æ–¥—É–ª—å –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

## –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏

1. –ó–∞–ø—É—Å—Ç–∏—Ç–µ `python migrate_secrets.py` –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏
2. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –≤—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –Ω–∞–ª–∏—á–∏–µ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è —Å–µ–∫—Ä–µ—Ç–æ–≤
3. –û–±–Ω–æ–≤–∏—Ç–µ –∫–æ–¥ –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
4. –ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä—É–π—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å –Ω–æ–≤—ã–º–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
"""
        
        report_file = self.project_root / "SECURITY_FIXES.md"
        with open(report_file, "w", encoding="utf-8") as f:
            f.write(report_content)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python fix_security.py <–ø—É—Ç—å_–∫_–ø—Ä–æ–µ–∫—Ç—É>")
        sys.exit(1)
    
    project_root = sys.argv[1]
    if not Path(project_root).exists():
        print(f"‚ùå –ü—É—Ç—å {project_root} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        sys.exit(1)
    
    fixer = SecurityFixer(project_root)
    fixer.fix_security_issues()


if __name__ == "__main__":
    main()

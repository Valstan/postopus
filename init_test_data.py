#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è PostOpus.
"""
import os
import sys
import logging
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

try:
    from sqlalchemy import create_engine, text
    from sqlalchemy.orm import sessionmaker
    from src.web.models import Post, Group, Schedule, User, Base
    from src.web.database import DATABASE_URL
    from src.web.config import Config
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install sqlalchemy psycopg2-binary")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def init_test_data():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
        engine = create_engine(DATABASE_URL, echo=False)
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        session = SessionLocal()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        with engine.connect() as connection:
            result = connection.execute(text("SELECT 1"))
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        logger.info("üîÑ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        logger.info("üë§ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        
        existing_users = session.query(User).count()
        if existing_users == 0:
            admin_user = User(
                username="admin",
                email="admin@postopus.local",
                hashed_password="admin",  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ —Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å
                is_active=True,
                is_admin=True,
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow()
            )
            
            session.add(admin_user)
            session.commit()
            logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        else:
            logger.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã
        logger.info("üë• –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã...")
        
        existing_groups = session.query(Group).count()
        if existing_groups == 0:
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
            for i, region in enumerate(Config.REGIONS, 1):
                group = Group(
                    name=f"{region} - –ò–Ω—Ñ–æ",
                    platform="vk",
                    group_id=f"-{100000000 + i}",  # –ó–∞–≥–ª—É—à–∫–∞ ID
                    region=region,
                    is_active=True,
                    created_at=datetime.utcnow(),
                    updated_at=datetime.utcnow(),
                    settings={
                        "migration_status": "created",
                        "original_region": region,
                        "vk_tokens": Config.get_active_vk_tokens()
                    }
                )
                
                session.add(group)
            
            session.commit()
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(Config.REGIONS)} –≥—Ä—É–ø–ø")
        else:
            logger.info("üë• –ì—Ä—É–ø–ø—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã
        logger.info("üìù –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã...")
        
        existing_posts = session.query(Post).count()
        if existing_posts == 0:
            # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –ø–æ—Å—Ç—ã –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Ä–µ–≥–∏–æ–Ω–∞
            test_posts = [
                {
                    "title": "–ù–æ–≤–æ—Å—Ç–∏ —Ä–µ–≥–∏–æ–Ω–∞",
                    "content": "–í–∞–∂–Ω—ã–µ –Ω–æ–≤–æ—Å—Ç–∏ –∏ —Å–æ–±—ã—Ç–∏—è –≤ —Ä–µ–≥–∏–æ–Ω–µ",
                    "region": "–ú–∞–ª–º—ã–∂",
                    "status": "published"
                },
                {
                    "title": "–û–±—ä—è–≤–ª–µ–Ω–∏—è",
                    "content": "–ü–æ–ª–µ–∑–Ω—ã–µ –æ–±—ä—è–≤–ª–µ–Ω–∏—è –¥–ª—è –∂–∏—Ç–µ–ª–µ–π",
                    "region": "–ù–æ–ª–∏–Ω—Å–∫",
                    "status": "published"
                },
                {
                    "title": "–°–æ–±—ã—Ç–∏—è",
                    "content": "–ö—É–ª—å—Ç—É—Ä–Ω—ã–µ –∏ —Å–ø–æ—Ä—Ç–∏–≤–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è",
                    "region": "–ê—Ä–±–∞–∂",
                    "status": "published"
                },
                {
                    "title": "–ü–ª–∞–Ω–∏—Ä—É–µ—Ç—Å—è –∫ –ø—É–±–ª–∏–∫–∞—Ü–∏–∏",
                    "content": "–ü–æ—Å—Ç –≤ –æ—á–µ—Ä–µ–¥–∏ –Ω–∞ –ø—É–±–ª–∏–∫–∞—Ü–∏—é",
                    "region": "–£—Ä–∂—É–º",
                    "status": "scheduled"
                },
                {
                    "title": "–ß–µ—Ä–Ω–æ–≤–∏–∫",
                    "content": "–ü–æ—Å—Ç –≤ –ø—Ä–æ—Ü–µ—Å—Å–µ —Ä–µ–¥–∞–∫—Ç–∏—Ä–æ–≤–∞–Ω–∏—è",
                    "region": "–ö–∏–ª—å–º–µ–∑—å",
                    "status": "draft"
                }
            ]
            
            for post_data in test_posts:
                post = Post(
                    title=post_data["title"],
                    content=post_data["content"],
                    region=post_data["region"],
                    source_collection=post_data["region"].lower().replace(" ", "_"),
                    status=post_data["status"],
                    created_at=datetime.utcnow(),
                    updated_at=datetime.utcnow(),
                    published_at=datetime.utcnow() if post_data["status"] == "published" else None,
                    scheduled_at=datetime.utcnow() if post_data["status"] == "scheduled" else None,
                    meta_data={
                        "test_data": True,
                        "created_by": "init_script",
                        "region": post_data["region"]
                    }
                )
                
                session.add(post)
            
            session.commit()
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(test_posts)} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤")
        else:
            logger.info("üìù –ü–æ—Å—Ç—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
        # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        logger.info("‚è∞ –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
        
        existing_schedules = session.query(Schedule).count()
        if existing_schedules == 0:
            # –°–æ–∑–¥–∞–µ–º —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
            schedules = [
                {
                    "name": "–ù–æ–≤–æ—Å—Ç–∏ –ú–∞–ª–º—ã–∂",
                    "cron": "05 7,8,10,12,14-23 * * *",
                    "description": "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –ú–∞–ª–º—ã–∂"
                },
                {
                    "name": "–†–µ–∫–ª–∞–º–∞ –ú–∞–ª–º—ã–∂",
                    "cron": "15 9,13 * * *",
                    "description": "–ü—É–±–ª–∏–∫–∞—Ü–∏—è —Ä–µ–∫–ª–∞–º—ã –ú–∞–ª–º—ã–∂"
                },
                {
                    "name": "–ù–æ–≤–æ—Å—Ç–∏ –î—Ä–∞–Ω",
                    "cron": "25 7,9,12,18,20,22 * * *",
                    "description": "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –Ω–æ–≤–æ—Å—Ç–µ–π –î—Ä–∞–Ω"
                },
                {
                    "name": "–°–±–æ—Ä —Ä–µ–∫–ª–∞–º—ã",
                    "cron": "40 5-22 * * *",
                    "description": "–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π —Å–±–æ—Ä —Ä–µ–∫–ª–∞–º—ã"
                }
            ]
            
            for schedule_data in schedules:
                schedule = Schedule(
                    name=schedule_data["name"],
                    cron_expression=schedule_data["cron"],
                    is_active=True,
                    created_at=datetime.utcnow(),
                    updated_at=datetime.utcnow(),
                    settings={
                        "description": schedule_data["description"],
                        "migration_status": "created",
                        "original_cron": schedule_data["cron"]
                    }
                )
                
                session.add(schedule)
            
            session.commit()
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(schedules)} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π")
        else:
            logger.info("‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
        session.close()
        
        logger.info("üéâ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö PostOpus")
    print("=" * 50)
    
    try:
        success = init_test_data()
        
        if success:
            print("\n‚úÖ –¢–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω—ã!")
            print("üìã –°–æ–∑–¥–∞–Ω–æ:")
            print("  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (admin/admin)")
            print(f"  - {len(Config.REGIONS)} –≥—Ä—É–ø–ø –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
            print("  - 5 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ—Å—Ç–æ–≤")
            print("  - 4 —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è –∑–∞–¥–∞—á")
            print("\nüåê –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å!")
            print("üìä –î–∞—à–±–æ—Ä–¥: https://your-app.onrender.com")
            print("üß™ –¢–µ—Å—Ç API: https://your-app.onrender.com/test")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö")
            return 1
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())

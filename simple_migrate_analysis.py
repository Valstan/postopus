#!/usr/bin/env python3
"""
–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–µ–π –º–∏–≥—Ä–∞—Ü–∏–∏.
"""
import json
import logging
from datetime import datetime
from typing import Dict, Any, List
from pymongo import MongoClient
from pymongo.errors import ConnectionFailure

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class SimpleMongoAnalyzer:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä MongoDB."""
    
    def __init__(self, mongo_url: str):
        self.mongo_url = mongo_url
        self.client = None
        self.db = None
        
    def connect(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB."""
        try:
            self.client = MongoClient(self.mongo_url)
            self.db = self.client['postopus']
            self.client.admin.command('ping')
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ")
            return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
            return False
    
    def analyze_and_export(self) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∏ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö."""
        logger.info("üîç –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∏ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–∞–Ω–Ω—ã–µ...")
        
        if not self.connect():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB")
        
        # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        collections = self.db.list_collection_names()
        logger.info(f"üìã –ù–∞–π–¥–µ–Ω–æ –∫–æ–ª–ª–µ–∫—Ü–∏–π: {len(collections)}")
        
        export_data = {
            "export_timestamp": datetime.now().isoformat(),
            "database_name": "postopus",
            "analysis": {},
            "data": {}
        }
        
        # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–∞–∂–¥—É—é –∫–æ–ª–ª–µ–∫—Ü–∏—é
        for collection_name in collections:
            logger.info(f"üìÑ –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é: {collection_name}")
            
            collection = self.db[collection_name]
            documents = list(collection.find({}))
            
            # –ê–Ω–∞–ª–∏–∑ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
            analysis = self._analyze_collection(documents, collection_name)
            export_data["analysis"][collection_name] = analysis
            
            # –≠–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö
            export_data["data"][collection_name] = documents
            
            logger.info(f"  üìä –î–æ–∫—É–º–µ–Ω—Ç–æ–≤: {len(documents)}")
            logger.info(f"  üîë –ü–æ–ª—è: {list(analysis['fields'].keys())}")
        
        # –°–æ–∑–¥–∞–µ–º –ø–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏
        migration_plan = self._create_migration_plan(export_data["analysis"])
        export_data["migration_plan"] = migration_plan
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–∞–Ω–Ω—ã–µ
        self._save_export_data(export_data)
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        if self.client:
            self.client.close()
        
        return export_data
    
    def _analyze_collection(self, documents: List[Dict], collection_name: str) -> Dict[str, Any]:
        """–ê–Ω–∞–ª–∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏."""
        if not documents:
            return {"fields": {}, "document_count": 0, "is_empty": True}
        
        # –ê–Ω–∞–ª–∏–∑ –ø–æ–ª–µ–π
        field_analysis = {}
        for doc in documents:
            for field, value in doc.items():
                if field not in field_analysis:
                    field_analysis[field] = {
                        "type": type(value).__name__,
                        "count": 0,
                        "sample_values": []
                    }
                
                field_analysis[field]["count"] += 1
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø—Ä–∏–º–µ—Ä—ã –∑–Ω–∞—á–µ–Ω–∏–π
                if len(field_analysis[field]["sample_values"]) < 3:
                    if isinstance(value, (str, int, float, bool)):
                        field_analysis[field]["sample_values"].append(value)
                    elif isinstance(value, list) and len(value) < 5:
                        field_analysis[field]["sample_values"].append(value)
        
        return {
            "fields": field_analysis,
            "document_count": len(documents),
            "is_empty": len(documents) == 0
        }
    
    def _create_migration_plan(self, analysis: Dict[str, Any]) -> Dict[str, Any]:
        """–°–æ–∑–¥–∞–Ω–∏–µ –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏."""
        plan = {
            "priority_collections": [],
            "data_mapping": {},
            "recommendations": [],
            "estimated_workload": {}
        }
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–Ω—ã–µ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
        for collection_name, data in analysis.items():
            if data["document_count"] > 0:
                if collection_name == "config":
                    plan["priority_collections"].append({
                        "name": collection_name,
                        "priority": "high",
                        "reason": "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ"
                    })
                elif collection_name not in ["logs", "statistics", "health_checks"]:
                    plan["priority_collections"].append({
                        "name": collection_name,
                        "priority": "medium",
                        "reason": "–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏–µ –¥–∞–Ω–Ω—ã–µ"
                    })
        
        # –ü–ª–∞–Ω–∏—Ä—É–µ–º –º–∞–ø–ø–∏–Ω–≥ –¥–∞–Ω–Ω—ã—Ö
        plan["data_mapping"] = {
            "posts": {
                "source_collections": [col for col in analysis.keys() if col not in ["users", "config", "logs", "statistics", "health_checks", "task_executions", "tasks", "deserter", "bal"]],
                "target_table": "posts",
                "strategy": "merge_all_collections"
            },
            "groups": {
                "source_collections": ["config"],
                "target_table": "groups",
                "strategy": "extract_from_config"
            },
            "users": {
                "source_collections": ["users"],
                "target_table": "users",
                "strategy": "direct_mapping"
            },
            "schedules": {
                "source_collections": ["tasks"],
                "target_table": "schedules",
                "strategy": "direct_mapping"
            }
        }
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
        plan["recommendations"] = [
            "–°–æ–∑–¥–∞—Ç—å —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é MongoDB –ø–µ—Ä–µ–¥ –º–∏–≥—Ä–∞—Ü–∏–µ–π",
            "–ü—Ä–æ—Ç–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –º–∏–≥—Ä–∞—Ü–∏—é –Ω–∞ –∫–æ–ø–∏–∏ –¥–∞–Ω–Ω—ã—Ö",
            "–î–æ–±–∞–≤–∏—Ç—å –ø–æ–ª–µ source_collection –≤ —Ç–∞–±–ª–∏—Ü—É posts",
            "–°–æ–∑–¥–∞—Ç—å –∏–Ω–¥–µ–∫—Å—ã –¥–ª—è —á–∞—Å—Ç–æ –∏—Å–ø–æ–ª—å–∑—É–µ–º—ã—Ö –ø–æ–ª–µ–π",
            "–ù–∞—Å—Ç—Ä–æ–∏—Ç—å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è admin"
        ]
        
        return plan
    
    def _save_export_data(self, data: Dict[str, Any]):
        """–°–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö."""
        timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
        
        # –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç
        full_export_file = f"mongo_full_export_{timestamp}.json"
        with open(full_export_file, 'w', encoding='utf-8') as f:
            json.dump(data, f, ensure_ascii=False, indent=2, default=str)
        
        # –≠–∫—Å–ø–æ—Ä—Ç —Ç–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã—Ö (–±–µ–∑ –∞–Ω–∞–ª–∏–∑–∞)
        data_only_file = f"mongo_data_only_{timestamp}.json"
        with open(data_only_file, 'w', encoding='utf-8') as f:
            json.dump(data["data"], f, ensure_ascii=False, indent=2, default=str)
        
        # –≠–∫—Å–ø–æ—Ä—Ç –ø–ª–∞–Ω–∞ –º–∏–≥—Ä–∞—Ü–∏–∏
        plan_file = f"migration_plan_{timestamp}.json"
        with open(plan_file, 'w', encoding='utf-8') as f:
            json.dump(data["migration_plan"], f, ensure_ascii=False, indent=2, default=str)
        
        logger.info(f"‚úÖ –î–∞–Ω–Ω—ã–µ —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã:")
        logger.info(f"  üìÑ –ü–æ–ª–Ω—ã–π —ç–∫—Å–ø–æ—Ä—Ç: {full_export_file}")
        logger.info(f"  üìÑ –¢–æ–ª—å–∫–æ –¥–∞–Ω–Ω—ã–µ: {data_only_file}")
        logger.info(f"  üìÑ –ü–ª–∞–Ω –º–∏–≥—Ä–∞—Ü–∏–∏: {plan_file}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üîç –£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–Ω–∞–ª–∏–∑ –∏ —ç–∫—Å–ø–æ—Ä—Ç –¥–∞–Ω–Ω—ã—Ö MongoDB")
    print("=" * 60)
    
    # URL MongoDB
    mongo_url = "mongodb+srv://valstan:nitro2000@postopus.qjxr9.mongodb.net/postopus?retryWrites=true&w=majority"
    
    try:
        # –°–æ–∑–¥–∞–µ–º –∞–Ω–∞–ª–∏–∑–∞—Ç–æ—Ä
        analyzer = SimpleMongoAnalyzer(mongo_url)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –∞–Ω–∞–ª–∏–∑ –∏ —ç–∫—Å–ø–æ—Ä—Ç
        results = analyzer.analyze_and_export()
        
        # –í—ã–≤–æ–¥–∏–º –∫—Ä–∞—Ç–∫—É—é —Å–≤–æ–¥–∫—É
        print("\nüìä –ö–†–ê–¢–ö–ê–Ø –°–í–û–î–ö–ê:")
        print("-" * 40)
        
        analysis = results.get('analysis', {})
        print(f"üìã –ö–æ–ª–ª–µ–∫—Ü–∏–π –ø—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ: {len(analysis)}")
        
        total_docs = sum(data['document_count'] for data in analysis.values())
        print(f"üìÑ –í—Å–µ–≥–æ –¥–æ–∫—É–º–µ–Ω—Ç–æ–≤: {total_docs}")
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∫–æ–ª–ª–µ–∫—Ü–∏–π
        post_collections = [col for col in analysis.keys() if col not in ['users', 'config', 'logs', 'statistics', 'health_checks', 'task_executions', 'tasks', 'deserter', 'bal']]
        print(f"üìù –ö–æ–ª–ª–µ–∫—Ü–∏–π —Å –ø–æ—Å—Ç–∞–º–∏: {len(post_collections)}")
        
        config_data = analysis.get('config', {})
        if config_data and not config_data.get('is_empty', True):
            print(f"‚öôÔ∏è –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–∞–π–¥–µ–Ω–∞")
        
        users_data = analysis.get('users', {})
        print(f"üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {users_data.get('document_count', 0)}")
        
        tasks_data = analysis.get('tasks', {})
        print(f"‚è∞ –ó–∞–¥–∞—á: {tasks_data.get('document_count', 0)}")
        
        print(f"\nüìÑ –§–∞–π–ª—ã —ç–∫—Å–ø–æ—Ä—Ç–∞ —Å–æ–∑–¥–∞–Ω—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∞–Ω–∞–ª–∏–∑–µ: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())

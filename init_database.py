#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL –Ω–∞ Render.com
"""
import os
import sys
import logging
from datetime import datetime
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

try:
    from sqlalchemy import create_engine, text
    from sqlalchemy.orm import sessionmaker
    from src.web.models import Post, Group, Schedule, User, Base
    from src.web.database import DATABASE_URL
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install sqlalchemy psycopg2-binary")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def init_database():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."""
    logger.info("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö PostgreSQL...")
    
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ PostgreSQL
        engine = create_engine(DATABASE_URL, echo=False)
        SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=engine)
        session = SessionLocal()
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        with engine.connect() as connection:
            result = connection.execute(text("SELECT 1"))
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        logger.info("üîÑ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã...")
        Base.metadata.create_all(bind=engine)
        logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        
        # –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞
        logger.info("üë§ –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞...")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É–∂–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
        existing_users = session.query(User).count()
        if existing_users == 0:
            admin_user = User(
                username="admin",
                email="admin@postopus.local",
                hashed_password="admin",  # –í –ø—Ä–æ–¥–∞–∫—à–µ–Ω–µ –Ω—É–∂–Ω–æ —Ö–µ—à–∏—Ä–æ–≤–∞—Ç—å
                is_active=True,
                is_admin=True,
                created_at=datetime.utcnow(),
                updated_at=datetime.utcnow()
            )
            
            session.add(admin_user)
            session.commit()
            logger.info("‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä —Å–æ–∑–¥–∞–Ω")
        else:
            logger.info("üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã (–∑–∞–≥–ª—É—à–∫–∏)
        logger.info("üë• –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã...")
        
        existing_groups = session.query(Group).count()
        if existing_groups == 0:
            # –°–æ–∑–¥–∞–µ–º –≥—Ä—É–ø–ø—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º
            regions = [
                "–ú–∞–ª–º—ã–∂", "–ù–æ–ª–∏–Ω—Å–∫", "–ê—Ä–±–∞–∂", "–ù–µ–º–∞", "–£—Ä–∂—É–º",
                "–í–µ—Ä—Ö–æ—à–∏–∂–µ–º—å–µ", "–ö–∏–ª—å–º–µ–∑—å", "–ü–∏–∂–∞–Ω–∫–∞", "–ê—Ñ–æ–Ω",
                "–ö—É–∫–º–æ—Ä", "–°–æ–≤–µ—Ç—Å–∫", "–í—è—Ç—Å–∫–∏–µ –ü–æ–ª—è–Ω—ã", "–õ–µ–±—è–∂—å–µ",
                "–î—Ä–∞–Ω", "–ë–∞–ª—Ç–∞—Å–∏"
            ]
            
            for i, region in enumerate(regions, 1):
                group = Group(
                    name=f"{region} - –ò–Ω—Ñ–æ",
                    platform="vk",
                    group_id=f"-{100000000 + i}",  # –ó–∞–≥–ª—É—à–∫–∞ ID
                    region=region,
                    is_active=True,
                    created_at=datetime.utcnow(),
                    updated_at=datetime.utcnow(),
                    settings={
                        "migration_status": "pending",
                        "original_region": region
                    }
                )
                
                session.add(group)
            
            session.commit()
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(regions)} –≥—Ä—É–ø–ø")
        else:
            logger.info("üë• –ì—Ä—É–ø–ø—ã —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
        # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è
        logger.info("‚è∞ –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è...")
        
        existing_schedules = session.query(Schedule).count()
        if existing_schedules == 0:
            schedules = [
                {
                    "name": "–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è –ø—É–±–ª–∏–∫–∞—Ü–∏—è",
                    "cron": "0 9 * * *",
                    "description": "–ü—É–±–ª–∏–∫–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –∫–∞–∂–¥—ã–π –¥–µ–Ω—å –≤ 9:00"
                },
                {
                    "name": "–ï–∂–µ–Ω–µ–¥–µ–ª—å–Ω–∞—è –æ—á–∏—Å—Ç–∫–∞",
                    "cron": "0 2 * * 0",
                    "description": "–û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∫–∞–∂–¥–æ–µ –≤–æ—Å–∫—Ä–µ—Å–µ–Ω—å–µ –≤ 2:00"
                }
            ]
            
            for schedule_data in schedules:
                schedule = Schedule(
                    name=schedule_data["name"],
                    cron_expression=schedule_data["cron"],
                    is_active=True,
                    created_at=datetime.utcnow(),
                    updated_at=datetime.utcnow(),
                    settings={
                        "description": schedule_data["description"],
                        "migration_status": "created"
                    }
                )
                
                session.add(schedule)
            
            session.commit()
            logger.info(f"‚úÖ –°–æ–∑–¥–∞–Ω–æ {len(schedules)} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π")
        else:
            logger.info("‚è∞ –†–∞—Å–ø–∏—Å–∞–Ω–∏—è —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É—é—Ç")
        
        session.close()
        
        logger.info("üéâ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return True
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üóÑÔ∏è –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL")
    print("=" * 50)
    
    try:
        success = init_database()
        
        if success:
            print("\n‚úÖ –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞!")
            print("üìã –°–æ–∑–¥–∞–Ω–æ:")
            print("  - –¢–∞–±–ª–∏—Ü—ã PostgreSQL")
            print("  - –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä (admin/admin)")
            print("  - –ë–∞–∑–æ–≤—ã–µ –≥—Ä—É–ø–ø—ã –ø–æ —Ä–µ–≥–∏–æ–Ω–∞–º")
            print("  - –ë–∞–∑–æ–≤—ã–µ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏—è")
            print("\nüöÄ –ì–æ—Ç–æ–≤–æ –∫ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö!")
        else:
            print("\n‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
            return 1
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
        return 1
    
    return 0

if __name__ == "__main__":
    exit(main())

#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–≥–æ –∫–æ–¥–∞ Postopus –Ω–∞ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É.
"""
import os
import sys
import shutil
import json
from pathlib import Path
from typing import Dict, Any, List


class PostopusMigrator:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ Postopus –Ω–∞ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É."""
    
    def __init__(self, project_root: str):
        self.project_root = Path(project_root)
        self.backup_dir = self.project_root / "backup_original"
        self.new_structure = {
            "src": {
                "models": ["post.py", "config.py"],
                "services": ["post_processor.py", "vk_service.py", "database_service.py"],
                "utils": ["text_utils.py", "date_utils.py", "image_utils.py", "logger.py"]
            },
            "tests": ["test_post_processor.py"],
            "logs": [],
            "temp_images": []
        }
    
    def migrate(self) -> None:
        """–í—ã–ø–æ–ª–Ω—è–µ—Ç –ø–æ–ª–Ω—É—é –º–∏–≥—Ä–∞—Ü–∏—é –ø—Ä–æ–µ–∫—Ç–∞."""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é Postopus...")
        
        try:
            # 1. –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
            self.create_backup()
            
            # 2. –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É
            self.create_new_structure()
            
            # 3. –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
            self.migrate_config()
            
            # 4. –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
            self.create_compatibility_script()
            
            # 5. –°–æ–∑–¥–∞–µ–º –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –º–∏–≥—Ä–∞—Ü–∏–∏
            self.create_migration_guide()
            
            print("‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            print(f"üìÅ –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è —Å–æ–∑–¥–∞–Ω–∞ –≤: {self.backup_dir}")
            print("üìñ –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –º–∏–≥—Ä–∞—Ü–∏–∏: MIGRATION_GUIDE.md")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
            sys.exit(1)
    
    def create_backup(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é –æ—Ä–∏–≥–∏–Ω–∞–ª—å–Ω–æ–≥–æ –∫–æ–¥–∞."""
        print("üì¶ –°–æ–∑–¥–∞–µ–º —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é...")
        
        if self.backup_dir.exists():
            shutil.rmtree(self.backup_dir)
        
        # –ö–æ–ø–∏—Ä—É–µ–º –≤—Å–µ —Ñ–∞–π–ª—ã –∫—Ä–æ–º–µ –Ω–æ–≤–æ–π —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        for item in self.project_root.iterdir():
            if item.name not in ['src', 'tests', 'logs', 'temp_images', 'backup_original']:
                if item.is_file():
                    shutil.copy2(item, self.backup_dir / item.name)
                elif item.is_dir():
                    shutil.copytree(item, self.backup_dir / item.name)
    
    def create_new_structure(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–π."""
        print("üèóÔ∏è –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É...")
        
        for dir_name, files in self.new_structure.items():
            dir_path = self.project_root / dir_name
            dir_path.mkdir(exist_ok=True)
            
            # –°–æ–∑–¥–∞–µ–º __init__.py —Ñ–∞–π–ª—ã
            if dir_name in ['src', 'tests']:
                (dir_path / "__init__.py").touch()
            
            # –°–æ–∑–¥–∞–µ–º –ø–æ–¥–¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏
            if isinstance(files, dict):
                for subdir, subfiles in files.items():
                    subdir_path = dir_path / subdir
                    subdir_path.mkdir(exist_ok=True)
                    (subdir_path / "__init__.py").touch()
    
    def migrate_config(self) -> None:
        """–ú–∏–≥—Ä–∏—Ä—É–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ —Å—Ç–∞—Ä–æ–≥–æ —Ñ–æ—Ä–º–∞—Ç–∞."""
        print("‚öôÔ∏è –ú–∏–≥—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é...")
        
        # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        env_file = self.project_root / ".env"
        if not env_file.exists():
            self.create_env_file()
        
        # –°–æ–∑–¥–∞–µ–º —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ MongoDB
        self.create_config_extractor()
    
    def create_env_file(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç .env —Ñ–∞–π–ª —Å –ø—Ä–∏–º–µ—Ä–æ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏."""
        env_content = """# Database configuration
MONGO_CLIENT=mongodb://localhost:27017/

# VK API tokens (comma-separated)
VK_TOKENS=your_vk_token_1,your_vk_token_2
VK_READ_TOKENS=your_read_token_1,your_read_token_2
VK_POST_TOKENS=your_post_token_1,your_post_token_2
VK_REPOST_TOKENS=your_repost_token_1,your_repost_token_2

# Telegram configuration
TELEGRAM_BOT_TOKEN=your_bot_token
TELEGRAM_CHAT_ID=your_chat_id

# Application settings
LOG_LEVEL=INFO
LOG_FILE=logs/postopus.log
"""
        
        with open(self.project_root / ".env", "w", encoding="utf-8") as f:
            f.write(env_content)
    
    def create_config_extractor(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ MongoDB."""
        extractor_script = '''#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏–∑–≤–ª–µ—á–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –∏–∑ MongoDB –∏ —Å–æ–∑–¥–∞–Ω–∏—è .env —Ñ–∞–π–ª–∞.
"""
import os
import sys
from pathlib import Path
from pymongo import MongoClient

def extract_config():
    """–ò–∑–≤–ª–µ–∫–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ MongoDB."""
    try:
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ MongoDB
        client = MongoClient(os.getenv('MONGO_CLIENT', 'mongodb://localhost:27017/'))
        db = client['postopus']
        collection = db['config']
        
        # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        config_doc = collection.find_one({'title': 'config'})
        
        if not config_doc:
            print("‚ùå –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ MongoDB")
            return
        
        # –°–æ–∑–¥–∞–µ–º .env —Ñ–∞–π–ª
        env_content = f"""# Database configuration
MONGO_CLIENT={config_doc.get('MONGO_CLIENT', 'mongodb://localhost:27017/')}

# VK API tokens
VK_TOKENS={','.join(config_doc.get('names_tokens_read_vk', []))}
VK_READ_TOKENS={','.join(config_doc.get('names_tokens_read_vk', []))}
VK_POST_TOKENS={','.join(config_doc.get('names_tokens_post_vk', []))}
VK_REPOST_TOKENS={','.join(config_doc.get('names_tokens_repost_vk', []))}

# Telegram configuration
TELEGRAM_BOT_TOKEN={config_doc.get('TELEGA_TOKEN_VALSTANBOT', '')}
TELEGRAM_CHAT_ID={config_doc.get('TELEGA_CHAT_ID', '')}

# Application settings
LOG_LEVEL=INFO
LOG_FILE=logs/postopus.log
"""
        
        with open('.env', 'w', encoding='utf-8') as f:
            f.write(env_content)
        
        print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –∏–∑–≤–ª–µ—á–µ–Ω–∞ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ .env")
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")

if __name__ == "__main__":
    extract_config()
'''
        
        with open(self.project_root / "extract_config.py", "w", encoding="utf-8") as f:
            f.write(extractor_script)
    
    def create_compatibility_script(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Å–∫—Ä–∏–ø—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏."""
        compatibility_script = '''#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ –¥–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –Ω–∞ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É.
"""
import sys
import os
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é —Å—Ç—Ä—É–∫—Ç—É—Ä—É –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent / "src"))

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–µ –º–æ–¥—É–ª–∏
from src.models.config import AppConfig
from src.services.post_processor import PostProcessor
from src.services.vk_service import VKService
from src.services.database_service import DatabaseService

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é session –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
config = AppConfig.from_env()
session = {
    'config': config,
    'post_processor': PostProcessor(config),
    'vk_service': VKService(config),
    'database_service': DatabaseService(config)
}

# –§—É–Ω–∫—Ü–∏–∏ —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
def get_mongo_base(base='postopus'):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å get_mongo_base."""
    return session['database_service'].connect()

def get_session(arguments, bags="0"):
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å get_session."""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ —Å–µ—Å—Å–∏–∏
    pass

def parser():
    """–°–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å —Å parser."""
    # –ó–¥–µ—Å—å –¥–æ–ª–∂–Ω–∞ –±—ã—Ç—å –ª–æ–≥–∏–∫–∞ –ø–∞—Ä—Å–∏–Ω–≥–∞
    pass

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
__all__ = ['session', 'get_mongo_base', 'get_session', 'parser']
'''
        
        with open(self.project_root / "compatibility.py", "w", encoding="utf-8") as f:
            f.write(compatibility_script)
    
    def create_migration_guide(self) -> None:
        """–°–æ–∑–¥–∞–µ—Ç —Ä—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –º–∏–≥—Ä–∞—Ü–∏–∏."""
        guide_content = """# –†—É–∫–æ–≤–æ–¥—Å—Ç–≤–æ –ø–æ –º–∏–≥—Ä–∞—Ü–∏–∏ Postopus

## –®–∞–≥–∏ –º–∏–≥—Ä–∞—Ü–∏–∏

### 1. –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞

```bash
# –°–æ–∑–¥–∞–π—Ç–µ —Ä–µ–∑–µ—Ä–≤–Ω—É—é –∫–æ–ø–∏—é
cp -r postopus postopus_backup

# –ó–∞–ø—É—Å—Ç–∏—Ç–µ –º–∏–≥—Ä–∞—Ü–∏—é
python migrate_to_new_architecture.py
```

### 2. –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è

```bash
# –ò–∑–≤–ª–µ–∫–∏—Ç–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –∏–∑ MongoDB
python extract_config.py

# –û—Ç—Ä–µ–¥–∞–∫—Ç–∏—Ä—É–π—Ç–µ .env —Ñ–∞–π–ª
nano .env
```

### 3. –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π

```bash
pip install -r requirements_new.txt
```

### 4. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ

```bash
# –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Ç–µ—Å—Ç—ã
pytest tests/

# –ó–∞–ø—É—Å—Ç–∏—Ç–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
python src/main.py novost 0
```

### 5. –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–∞—è –º–∏–≥—Ä–∞—Ü–∏—è

–î–ª—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏:

```python
# –í –≤–∞—à–∏—Ö —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö —Å–∫—Ä–∏–ø—Ç–∞—Ö
import compatibility
from compatibility import session, parser

# –í–∞—à —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π –∫–æ–¥ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å
posts = parser()
```

## –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –ø–æ—Å–ª–µ –º–∏–≥—Ä–∞—Ü–∏–∏

```
postopus/
‚îú‚îÄ‚îÄ src/                    # –ù–æ–≤–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞
‚îÇ   ‚îú‚îÄ‚îÄ models/            # –ú–æ–¥–µ–ª–∏ –¥–∞–Ω–Ω—ã—Ö
‚îÇ   ‚îú‚îÄ‚îÄ services/          # –ë–∏–∑–Ω–µ—Å-–ª–æ–≥–∏–∫–∞
‚îÇ   ‚îî‚îÄ‚îÄ utils/             # –£—Ç–∏–ª–∏—Ç—ã
‚îú‚îÄ‚îÄ tests/                 # –¢–µ—Å—Ç—ã
‚îú‚îÄ‚îÄ logs/                  # –õ–æ–≥–∏
‚îú‚îÄ‚îÄ backup_original/       # –†–µ–∑–µ—Ä–≤–Ω–∞—è –∫–æ–ø–∏—è
‚îú‚îÄ‚îÄ compatibility.py       # –°–∫—Ä–∏–ø—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
‚îú‚îÄ‚îÄ extract_config.py      # –ò–∑–≤–ª–µ—á–µ–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
‚îî‚îÄ‚îÄ .env                   # –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
```

## –ü—Ä–µ–∏–º—É—â–µ—Å—Ç–≤–∞ –Ω–æ–≤–æ–π –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—ã

1. **–ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å**: –°–µ–∫—Ä–µ—Ç—ã –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
2. **–¢–µ—Å—Ç–∏—Ä—É–µ–º–æ—Å—Ç—å**: Unit —Ç–µ—Å—Ç—ã –¥–ª—è –≤—Å–µ—Ö –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–æ–≤
3. **–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–æ—Å—Ç—å**: –ß–µ—Ç–∫–∞—è —Å—Ç—Ä—É–∫—Ç—É—Ä–∞ –∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è
4. **–ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å**: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞
5. **–ú–∞—Å—à—Ç–∞–±–∏—Ä—É–µ–º–æ—Å—Ç—å**: –ú–æ–¥—É–ª—å–Ω–∞—è –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–∞

## –û–±—Ä–∞—Ç–Ω–∞—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç—å

–°—Ç–∞—Ä—ã–π –∫–æ–¥ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å —á–µ—Ä–µ–∑ —Å–∫—Ä–∏–ø—Ç —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏, –Ω–æ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç—å –Ω–∞ –Ω–æ–≤—É—é –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä—É.

## –ü–æ–¥–¥–µ—Ä–∂–∫–∞

–ü—Ä–∏ –≤–æ–∑–Ω–∏–∫–Ω–æ–≤–µ–Ω–∏–∏ –ø—Ä–æ–±–ª–µ–º:

1. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ –≤ `logs/postopus.log`
2. –£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã
3. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
4. –û–±—Ä–∞—Ç–∏—Ç–µ—Å—å –∫ —Ä–∞–∑—Ä–∞–±–æ—Ç—á–∏–∫—É
"""
        
        with open(self.project_root / "MIGRATION_GUIDE.md", "w", encoding="utf-8") as f:
            f.write(guide_content)


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    if len(sys.argv) != 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python migrate_to_new_architecture.py <–ø—É—Ç—å_–∫_–ø—Ä–æ–µ–∫—Ç—É>")
        sys.exit(1)
    
    project_root = sys.argv[1]
    if not Path(project_root).exists():
        print(f"‚ùå –ü—É—Ç—å {project_root} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        sys.exit(1)
    
    migrator = PostopusMigrator(project_root)
    migrator.migrate()


if __name__ == "__main__":
    main()

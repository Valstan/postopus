#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB –≤ PostgreSQL –¥–ª—è PostOpus.
"""
import os
import sys
import json
import logging
from datetime import datetime
from typing import Dict, Any, List, Optional
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.append(str(Path(__file__).parent))

try:
    from pymongo import MongoClient
    from pymongo.errors import ConnectionFailure
    from sqlalchemy import create_engine, text
    from sqlalchemy.orm import sessionmaker
    from src.web.models import Post, Group, Schedule, User, Base
    from src.web.database import DATABASE_URL
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install pymongo sqlalchemy psycopg2-binary")
    sys.exit(1)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

class MongoToPostgresMigrator:
    """–ö–ª–∞—Å—Å –¥–ª—è –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB –≤ PostgreSQL."""
    
    def __init__(self, mongo_url: str, postgres_url: str):
        self.mongo_url = mongo_url
        self.postgres_url = postgres_url
        self.mongo_client = None
        self.mongo_db = None
        self.postgres_engine = None
        self.postgres_session = None
        
    def connect_mongo(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB."""
        try:
            self.mongo_client = MongoClient(self.mongo_url)
            self.mongo_db = self.mongo_client['postopus']
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            self.mongo_client.admin.command('ping')
            logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ MongoDB —É—Å–ø–µ—à–Ω–æ")
            return True
        except ConnectionFailure as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ MongoDB: {e}")
            return False
        except Exception as e:
            logger.error(f"‚ùå –ù–µ–æ–∂–∏–¥–∞–Ω–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ MongoDB: {e}")
            return False
    
    def connect_postgres(self) -> bool:
        """–ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL."""
        try:
            self.postgres_engine = create_engine(self.postgres_url, echo=False)
            SessionLocal = sessionmaker(autocommit=False, autoflush=False, bind=self.postgres_engine)
            self.postgres_session = SessionLocal()
            
            # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            with self.postgres_engine.connect() as connection:
                result = connection.execute(text("SELECT 1"))
                logger.info("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ PostgreSQL —É—Å–ø–µ—à–Ω–æ")
                return True
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ PostgreSQL: {e}")
            return False
    
    def migrate_posts(self) -> int:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –∏–∑ MongoDB –≤ PostgreSQL."""
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ—Å—Ç–æ–≤...")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤ –∏–∑ MongoDB
            collections = self.mongo_db.list_collection_names()
            post_collections = [col for col in collections if col not in ['users', 'settings', 'logs', 'statistics', 'health_checks', 'task_executions', 'tasks', 'config', 'deserter', 'bal']]
            
            migrated_count = 0
            
            for collection_name in post_collections:
                logger.info(f"üìÑ –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–ª–ª–µ–∫—Ü–∏—é: {collection_name}")
                collection = self.mongo_db[collection_name]
                
                # –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –¥–æ–∫—É–º–µ–Ω—Ç—ã –∏–∑ –∫–æ–ª–ª–µ–∫—Ü–∏–∏
                documents = list(collection.find({}))
                
                for doc in documents:
                    try:
                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Post –¥–ª—è PostgreSQL
                        post = Post(
                            title=doc.get('title', f'Post from {collection_name}'),
                            content=doc.get('text', doc.get('content', '')),
                            image_url=doc.get('image_url', doc.get('image', '')),
                            video_url=doc.get('video_url', doc.get('video', '')),
                            status=doc.get('status', 'draft'),
                            created_at=doc.get('created_at', datetime.utcnow()),
                            updated_at=doc.get('updated_at', datetime.utcnow()),
                            scheduled_at=doc.get('scheduled_at'),
                            published_at=doc.get('published_at'),
                            vk_group_id=doc.get('vk_group_id', doc.get('group_id')),
                            telegram_chat_id=doc.get('telegram_chat_id'),
                            metadata={
                                'mongo_collection': collection_name,
                                'mongo_id': str(doc.get('_id')),
                                'original_data': {k: v for k, v in doc.items() if k not in ['_id', 'title', 'text', 'content', 'image', 'image_url', 'video', 'video_url', 'status', 'created_at', 'updated_at', 'scheduled_at', 'published_at', 'group_id', 'vk_group_id', 'telegram_chat_id']}
                            }
                        )
                        
                        self.postgres_session.add(post)
                        migrated_count += 1
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–æ–∫—É–º–µ–Ω—Ç–∞ –∏–∑ {collection_name}: {e}")
                        continue
                
                logger.info(f"‚úÖ –ö–æ–ª–ª–µ–∫—Ü–∏—è {collection_name} –æ–±—Ä–∞–±–æ—Ç–∞–Ω–∞")
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.postgres_session.commit()
            logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ—Å—Ç–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {migrated_count} –ø–æ—Å—Ç–æ–≤")
            return migrated_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ—Å—Ç–æ–≤: {e}")
            self.postgres_session.rollback()
            return 0
    
    def migrate_groups(self) -> int:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø –∏–∑ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ MongoDB –≤ PostgreSQL."""
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –≥—Ä—É–ø–ø...")
        
        try:
            migrated_count = 0
            
            # –ü–æ–ª—É—á–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é –≥—Ä—É–ø–ø
            config_collection = self.mongo_db['config']
            config_doc = config_collection.find_one({'title': 'config'})
            
            if config_doc and 'all_my_groups' in config_doc:
                groups_data = config_doc['all_my_groups']
                
                for group_name, group_id in groups_data.items():
                    try:
                        # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Group –¥–ª—è PostgreSQL
                        group = Group(
                            name=group_name,
                            platform='vk',  # –ü—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º VK
                            group_id=str(group_id),
                            access_token=None,  # –¢–æ–∫–µ–Ω—ã —Ö—Ä–∞–Ω—è—Ç—Å—è –æ—Ç–¥–µ–ª—å–Ω–æ
                            is_active=True,
                            created_at=datetime.utcnow(),
                            updated_at=datetime.utcnow(),
                            settings={
                                'mongo_source': 'config.all_my_groups',
                                'original_id': group_id
                            }
                        )
                        
                        self.postgres_session.add(group)
                        migrated_count += 1
                        
                    except Exception as e:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø—ã {group_name}: {e}")
                        continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.postgres_session.commit()
            logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –≥—Ä—É–ø–ø –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {migrated_count} –≥—Ä—É–ø–ø")
            return migrated_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –≥—Ä—É–ø–ø: {e}")
            self.postgres_session.rollback()
            return 0
    
    def migrate_users(self) -> int:
        """–ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ MongoDB –≤ PostgreSQL."""
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...")
        
        try:
            migrated_count = 0
            
            # –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∏–∑ MongoDB
            users_collection = self.mongo_db['users']
            users = list(users_collection.find({}))
            
            for user_doc in users:
                try:
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç User –¥–ª—è PostgreSQL
                    user = User(
                        username=user_doc.get('username', ''),
                        email=user_doc.get('email', ''),
                        hashed_password=user_doc.get('hashed_password', ''),
                        is_active=user_doc.get('is_active', True),
                        is_admin=user_doc.get('is_admin', False),
                        created_at=user_doc.get('created_at', datetime.utcnow()),
                        updated_at=user_doc.get('updated_at', datetime.utcnow())
                    )
                    
                    self.postgres_session.add(user)
                    migrated_count += 1
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {e}")
                    continue
            
            # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –Ω–µ—Ç, —Å–æ–∑–¥–∞–µ–º –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
            if migrated_count == 0:
                logger.info("üìù –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é...")
                from passlib.context import CryptContext
                pwd_context = CryptContext(schemes=["bcrypt"], deprecated="auto")
                
                admin_user = User(
                    username="admin",
                    email="admin@postopus.local",
                    hashed_password=pwd_context.hash("admin"),
                    is_active=True,
                    is_admin=True,
                    created_at=datetime.utcnow(),
                    updated_at=datetime.utcnow()
                )
                
                self.postgres_session.add(admin_user)
                migrated_count = 1
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.postgres_session.commit()
            logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {migrated_count} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π")
            return migrated_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π: {e}")
            self.postgres_session.rollback()
            return 0
    
    def migrate_schedules(self) -> int:
        """–ú–∏–≥—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∏–∑ MongoDB –≤ PostgreSQL."""
        logger.info("üîÑ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π...")
        
        try:
            migrated_count = 0
            
            # –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞—á–∏ –∏–∑ MongoDB
            tasks_collection = self.mongo_db['tasks']
            tasks = list(tasks_collection.find({}))
            
            for task_doc in tasks:
                try:
                    # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç Schedule –¥–ª—è PostgreSQL
                    schedule = Schedule(
                        name=task_doc.get('name', f'Task {task_doc.get("id", "unknown")}'),
                        cron_expression=task_doc.get('cron', '0 0 * * *'),  # –ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –µ–∂–µ–¥–Ω–µ–≤–Ω–æ
                        is_active=task_doc.get('enabled', True),
                        created_at=task_doc.get('created_at', datetime.utcnow()),
                        updated_at=task_doc.get('updated_at', datetime.utcnow()),
                        last_run=task_doc.get('last_run'),
                        next_run=task_doc.get('next_run'),
                        settings={
                            'mongo_id': str(task_doc.get('_id')),
                            'original_data': task_doc
                        }
                    )
                    
                    self.postgres_session.add(schedule)
                    migrated_count += 1
                    
                except Exception as e:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ –∑–∞–¥–∞—á–∏: {e}")
                    continue
            
            # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è
            self.postgres_session.commit()
            logger.info(f"‚úÖ –ú–∏–≥—Ä–∞—Ü–∏—è —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π –∑–∞–≤–µ—Ä—à–µ–Ω–∞. –ü–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {migrated_count} —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π")
            return migrated_count
            
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –º–∏–≥—Ä–∞—Ü–∏–∏ —Ä–∞—Å–ø–∏—Å–∞–Ω–∏–π: {e}")
            self.postgres_session.rollback()
            return 0
    
    def create_tables(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL."""
        logger.info("üîÑ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã –≤ PostgreSQL...")
        try:
            Base.metadata.create_all(bind=self.postgres_engine)
            logger.info("‚úÖ –¢–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–∞–±–ª–∏—Ü: {e}")
            raise
    
    def run_migration(self) -> Dict[str, int]:
        """–ó–∞–ø—É—Å–∫ –ø–æ–ª–Ω–æ–π –º–∏–≥—Ä–∞—Ü–∏–∏."""
        logger.info("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB –≤ PostgreSQL...")
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–∞–º –¥–∞–Ω–Ω—ã—Ö
        if not self.connect_mongo():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ MongoDB")
        
        if not self.connect_postgres():
            raise Exception("–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è –∫ PostgreSQL")
        
        # –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—ã
        self.create_tables()
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        results = {
            'posts': self.migrate_posts(),
            'groups': self.migrate_groups(),
            'users': self.migrate_users(),
            'schedules': self.migrate_schedules()
        }
        
        # –ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
        if self.mongo_client:
            self.mongo_client.close()
        if self.postgres_session:
            self.postgres_session.close()
        
        logger.info("üéâ –ú–∏–≥—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
        return results

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üîÑ –°–∫—Ä–∏–ø—Ç –º–∏–≥—Ä–∞—Ü–∏–∏ –¥–∞–Ω–Ω—ã—Ö –∏–∑ MongoDB –≤ PostgreSQL")
    print("=" * 60)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
    mongo_url = input("–í–≤–µ–¥–∏—Ç–µ URL MongoDB (–Ω–∞–ø—Ä–∏–º–µ—Ä: mongodb://user:pass@host:port/): ").strip()
    if not mongo_url:
        print("‚ùå URL MongoDB –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        return
    
    # URL PostgreSQL –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–ª–∏ –≤–≤–æ–¥ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    postgres_url = os.getenv('DATABASE_URL', DATABASE_URL)
    if not postgres_url or postgres_url == DATABASE_URL:
        postgres_url = input("–í–≤–µ–¥–∏—Ç–µ URL PostgreSQL (–Ω–∞–ø—Ä–∏–º–µ—Ä: postgresql://user:pass@host:port/db): ").strip()
        if not postgres_url:
            print("‚ùå URL PostgreSQL –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
            return
    
    try:
        # –°–æ–∑–¥–∞–µ–º –º–∏–≥—Ä–∞—Ç–æ—Ä
        migrator = MongoToPostgresMigrator(mongo_url, postgres_url)
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –º–∏–≥—Ä–∞—Ü–∏—é
        results = migrator.run_migration()
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        print("\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –º–∏–≥—Ä–∞—Ü–∏–∏:")
        print("-" * 30)
        for table, count in results.items():
            print(f"  {table}: {count} –∑–∞–ø–∏—Å–µ–π")
        
        total = sum(results.values())
        print(f"\n‚úÖ –í—Å–µ–≥–æ –ø–µ—Ä–µ–Ω–µ—Å–µ–Ω–æ: {total} –∑–∞–ø–∏—Å–µ–π")
        
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏ –º–∏–≥—Ä–∞—Ü–∏–∏: {e}")
        sys.exit(1)

if __name__ == "__main__":
    main()

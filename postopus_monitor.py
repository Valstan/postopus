#!/usr/bin/env python3
# -*- coding: utf-8 -*-
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –¥–µ–ø–ª–æ—è–º–∏ Postopus
"""
import asyncio
import json
from datetime import datetime
import sys
import os

# ID —Å–µ—Ä–≤–∏—Å–æ–≤ Postopus –Ω–∞ Render
POSTOPUS_SERVICES = {
    "web": "srv-d3bv87r7mgec73a336s0",  # postopus-web-only
    "worker": "srv-d3bv87r7mgec73a336s1",  # postopus-worker  
    "scheduler": "srv-d3bv87r7mgec73a336s2",  # postopus-scheduler
    "redis": "srv-d3bv87r7mgec73a336s3",  # postopus-redis
    "postgres": "srv-d3bv87r7mgec73a336s4"  # postopus-postgres
}

class PostopusDeploymentMonitor:
    """–ú–æ–Ω–∏—Ç–æ—Ä –¥–µ–ø–ª–æ—è –¥–ª—è –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ Postopus"""
    
    def __init__(self):
        self.services = POSTOPUS_SERVICES
        self.monitoring_tasks = []
        
    async def monitor_service_deployment(self, service_name: str, service_id: str, deploy_id: str):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –¥–µ–ø–ª–æ–π –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞"""
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {service_name} (ID: {service_id})")
        
        try:
            # –ó–¥–µ—Å—å –±—É–¥–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π –≤—ã–∑–æ–≤ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞
            # –ü–æ–∫–∞ —Å–∏–º—É–ª–∏—Ä—É–µ–º
            await asyncio.sleep(2)
            print(f"‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ {service_name} –∑–∞–≤–µ—Ä—à–µ–Ω")
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ {service_name}: {e}")
    
    async def monitor_all_services(self, deploy_ids: dict = None):
        """–ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç –¥–µ–ø–ª–æ–π –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ Postopus")
        print("=" * 80)
        
        if not deploy_ids:
            # –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω—ã ID –¥–µ–ø–ª–æ–µ–≤, –∏—Å–ø–æ–ª—å–∑—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ
            deploy_ids = {
                "web": "dep-latest-web",
                "worker": "dep-latest-worker", 
                "scheduler": "dep-latest-scheduler"
            }
        
        # –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞—á–∏ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ —Å–µ—Ä–≤–∏—Å–∞
        tasks = []
        for service_name, service_id in self.services.items():
            if service_name in deploy_ids:
                deploy_id = deploy_ids[service_name]
                task = asyncio.create_task(
                    self.monitor_service_deployment(service_name, service_id, deploy_id)
                )
                tasks.append(task)
        
        # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –≤—Å–µ—Ö –∑–∞–¥–∞—á
        if tasks:
            await asyncio.gather(*tasks, return_exceptions=True)
        
        print("\n‚úÖ –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤ –∑–∞–≤–µ—Ä—à–µ–Ω")
    
    def get_service_info(self, service_name: str) -> dict:
        """–í–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–µ—Ä–≤–∏—Å–µ"""
        if service_name not in self.services:
            return {"error": f"–°–µ—Ä–≤–∏—Å {service_name} –Ω–µ –Ω–∞–π–¥–µ–Ω"}
        
        return {
            "name": service_name,
            "id": self.services[service_name],
            "url": f"https://{service_name}.onrender.com" if service_name != "redis" and service_name != "postgres" else None
        }
    
    def list_services(self):
        """–í—ã–≤–æ–¥–∏—Ç —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤"""
        print("–°–µ—Ä–≤–∏—Å—ã Postopus –Ω–∞ Render:")
        print("-" * 50)
        for name, service_id in self.services.items():
            info = self.get_service_info(name)
            print(f"{name.upper()}: {service_id}")
            if info.get("url"):
                print(f"   URL: {info['url']}")
        print("-" * 50)

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    monitor = PostopusDeploymentMonitor()
    
    if len(sys.argv) < 2:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python postopus_monitor.py list                    # –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã")
        print("  python postopus_monitor.py monitor <service>       # –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –∫–æ–Ω–∫—Ä–µ—Ç–Ω—ã–π —Å–µ—Ä–≤–∏—Å")
        print("  python postopus_monitor.py monitor-all             # –ú–æ–Ω–∏—Ç–æ—Ä–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã")
        print("\n–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:", ", ".join(POSTOPUS_SERVICES.keys()))
        sys.exit(1)
    
    command = sys.argv[1]
    
    if command == "list":
        monitor.list_services()
        
    elif command == "monitor":
        if len(sys.argv) < 3:
            print("–£–∫–∞–∂–∏—Ç–µ —Å–µ—Ä–≤–∏—Å –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:", ", ".join(POSTOPUS_SERVICES.keys()))
            sys.exit(1)
        
        service_name = sys.argv[2]
        if service_name not in POSTOPUS_SERVICES:
            print(f"–°–µ—Ä–≤–∏—Å {service_name} –Ω–µ –Ω–∞–π–¥–µ–Ω")
            print("–î–æ—Å—Ç—É–ø–Ω—ã–µ —Å–µ—Ä–≤–∏—Å—ã:", ", ".join(POSTOPUS_SERVICES.keys()))
            sys.exit(1)
        
        service_id = POSTOPUS_SERVICES[service_name]
        deploy_id = sys.argv[3] if len(sys.argv) > 3 else "dep-latest"
        
        await monitor.monitor_service_deployment(service_name, service_id, deploy_id)
        
    elif command == "monitor-all":
        deploy_ids = {}
        if len(sys.argv) > 2:
            # –ü–∞—Ä—Å–∏–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –∞—Ä–≥—É–º–µ–Ω—Ç—ã –¥–ª—è ID –¥–µ–ø–ª–æ–µ–≤
            for arg in sys.argv[2:]:
                if "=" in arg:
                    service, deploy_id = arg.split("=", 1)
                    deploy_ids[service] = deploy_id
        
        await monitor.monitor_all_services(deploy_ids)
        
    else:
        print(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: {command}")
        sys.exit(1)

if __name__ == "__main__":
    asyncio.run(main())

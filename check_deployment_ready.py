#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –ø—Ä–æ–µ–∫—Ç–∞ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ Render.com
"""
import os
import sys
from pathlib import Path

def print_step(step, description, status="‚úÖ"):
    """–í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —à–∞–≥–µ."""
    print(f"{status} –®–∞–≥ {step}: {description}")

def check_file_exists(file_path, description):
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ —Ñ–∞–π–ª–∞."""
    if Path(file_path).exists():
        print(f"‚úÖ {description}")
        return True
    else:
        print(f"‚ùå {description} - —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False

def check_requirements():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç requirements —Ñ–∞–π–ª—ã."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ requirements —Ñ–∞–π–ª–æ–≤...")
    
    files = [
        ("requirements_render.txt", "Requirements –¥–ª—è Render.com"),
        ("requirements_web.txt", "Requirements –¥–ª—è –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è")
    ]
    
    all_good = True
    for file_path, description in files:
        if not check_file_exists(file_path, description):
            all_good = False
    
    return all_good

def check_web_app():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è...")
    
    files = [
        ("src/web/main_render.py", "–ì–ª–∞–≤–Ω—ã–π —Ñ–∞–π–ª –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"),
        ("src/web/routers/auth.py", "–†–æ—É—Ç–µ—Ä –∞—É—Ç–µ–Ω—Ç–∏—Ñ–∏–∫–∞—Ü–∏–∏"),
        ("src/web/routers/dashboard.py", "–†–æ—É—Ç–µ—Ä –¥–∞—à–±–æ—Ä–¥–∞"),
        ("src/web/routers/posts.py", "–†–æ—É—Ç–µ—Ä –ø–æ—Å—Ç–æ–≤"),
        ("src/web/routers/scheduler.py", "–†–æ—É—Ç–µ—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞"),
        ("src/web/routers/settings.py", "–†–æ—É—Ç–µ—Ä –Ω–∞—Å—Ç—Ä–æ–µ–∫"),
        ("src/web/database.py", "–ú–æ–¥—É–ª—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    ]
    
    all_good = True
    for file_path, description in files:
        if not check_file_exists(file_path, description):
            all_good = False
    
    return all_good

def check_celery():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç Celery –∑–∞–¥–∞—á–∏."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Celery –∑–∞–¥–∞—á...")
    
    files = [
        ("src/tasks/celery_app.py", "Celery –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ"),
        ("src/tasks/post_tasks.py", "–ó–∞–¥–∞—á–∏ –ø–æ—Å—Ç–æ–≤"),
        ("src/tasks/scheduler_tasks.py", "–ó–∞–¥–∞—á–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
    ]
    
    all_good = True
    for file_path, description in files:
        if not check_file_exists(file_path, description):
            all_good = False
    
    return all_good

def check_config():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤...")
    
    files = [
        ("render.yaml", "–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Render.com"),
        (".gitignore", "Git ignore —Ñ–∞–π–ª"),
        ("env.example", "–ü—Ä–∏–º–µ—Ä –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"),
        ("README.md", "–î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è –ø—Ä–æ–µ–∫—Ç–∞")
    ]
    
    all_good = True
    for file_path, description in files:
        if not check_file_exists(file_path, description):
            all_good = False
    
    return all_good

def check_tensorflow_removed():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç, —á—Ç–æ TensorFlow —É–¥–∞–ª–µ–Ω."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è TensorFlow...")
    
    try:
        with open("requirements_render.txt", "r", encoding="utf-8") as f:
            content = f.read()
        
        if "tensorflow" in content and not content.count("# tensorflow"):
            print("‚ùå TensorFlow –Ω–µ —É–¥–∞–ª–µ–Ω –∏–∑ requirements_render.txt")
            return False
        else:
            print("‚úÖ TensorFlow —É–¥–∞–ª–µ–Ω –∏–∑ requirements_render.txt")
        
        with open("requirements_web.txt", "r", encoding="utf-8") as f:
            content = f.read()
        
        if "tensorflow" in content and not content.count("# tensorflow"):
            print("‚ùå TensorFlow –Ω–µ —É–¥–∞–ª–µ–Ω –∏–∑ requirements_web.txt")
            return False
        else:
            print("‚úÖ TensorFlow —É–¥–∞–ª–µ–Ω –∏–∑ requirements_web.txt")
        
        return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ TensorFlow: {e}")
        return False

def check_git_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å Git."""
    print("\nüîç –ü—Ä–æ–≤–µ—Ä–∫–∞ Git —Å—Ç–∞—Ç—É—Å–∞...")
    
    try:
        import subprocess
        result = subprocess.run("git status --porcelain", shell=True, capture_output=True, text=True)
        
        if result.stdout.strip():
            print("‚ö†Ô∏è  –ï—Å—Ç—å –Ω–µ—Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è:")
            print(result.stdout)
            return False
        else:
            print("‚úÖ –í—Å–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ Git")
            return True
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Git: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è."""
    print("üöÄ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ Postopus –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é –Ω–∞ Render.com")
    print("=" * 70)
    
    checks = [
        ("Requirements —Ñ–∞–π–ª—ã", check_requirements),
        ("–í–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ", check_web_app),
        ("Celery –∑–∞–¥–∞—á–∏", check_celery),
        ("–ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–æ–Ω–Ω—ã–µ —Ñ–∞–π–ª—ã", check_config),
        ("–£–¥–∞–ª–µ–Ω–∏–µ TensorFlow", check_tensorflow_removed),
        ("Git —Å—Ç–∞—Ç—É—Å", check_git_status)
    ]
    
    all_passed = True
    
    for check_name, check_func in checks:
        print(f"\nüìã {check_name}:")
        if not check_func():
            all_passed = False
    
    print("\n" + "=" * 70)
    
    if all_passed:
        print("üéâ –í–°–ï –ü–†–û–í–ï–†–ö–ò –ü–†–û–ô–î–ï–ù–´! –ü—Ä–æ–µ–∫—Ç –≥–æ—Ç–æ–≤ –∫ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—é!")
        print("\nüìã –°–ª–µ–¥—É—é—â–∏–µ —à–∞–≥–∏:")
        print("1. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –Ω–∞ https://render.com")
        print("2. –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –≤ RENDER_STEP_BY_STEP.md")
        print("3. –°–æ–∑–¥–∞–π—Ç–µ PostgreSQL, Redis –∏ Web Service")
        print("4. –ù–∞—Å–ª–∞–∂–¥–∞–π—Ç–µ—Å—å –∞–≤—Ç–æ–º–∞—Ç–∏–∑–∞—Ü–∏–µ–π! üöÄ")
    else:
        print("‚ùå –ù–ï–ö–û–¢–û–†–´–ï –ü–†–û–í–ï–†–ö–ò –ù–ï –ü–†–û–ô–î–ï–ù–´!")
        print("–ò—Å–ø—Ä–∞–≤—å—Ç–µ –æ—à–∏–±–∫–∏ –≤—ã—à–µ –∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ —Å–∫—Ä–∏–ø—Ç —Å–Ω–æ–≤–∞.")
        sys.exit(1)

if __name__ == "__main__":
    main()

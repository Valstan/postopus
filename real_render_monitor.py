#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å —Ä–µ–∞–ª—å–Ω—ã–º MCP Render API –¥–ª—è –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞ –ª–æ–≥–æ–≤
"""
import asyncio
import json
from datetime import datetime, timedelta
from typing import List, Dict, Optional
import sys
import os

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º MCP —Ñ—É–Ω–∫—Ü–∏–∏ (–µ—Å–ª–∏ –¥–æ—Å—Ç—É–ø–Ω—ã)
try:
    # –≠—Ç–∏ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –¥–æ—Å—Ç—É–ø–Ω—ã –≤ –∫–æ–Ω—Ç–µ–∫—Å—Ç–µ MCP
    from mcp_render_list_logs import mcp_render_list_logs
    from mcp_render_get_deploy import mcp_render_get_deploy
    from mcp_render_get_service import mcp_render_get_service
except ImportError:
    # –ó–∞–≥–ª—É—à–∫–∏ –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    def mcp_render_list_logs(*args, **kwargs):
        return {"logs": [], "hasMore": False}
    
    def mcp_render_get_deploy(*args, **kwargs):
        return {"status": "build_in_progress"}
    
    def mcp_render_get_service(*args, **kwargs):
        return {"status": "live"}

class RealRenderMonitor:
    """–†–µ–∞–ª—å–Ω—ã–π –º–æ–Ω–∏—Ç–æ—Ä –ª–æ–≥–æ–≤ Render —á–µ—Ä–µ–∑ MCP API"""
    
    def __init__(self, service_id: str, deploy_id: str):
        self.service_id = service_id
        self.deploy_id = deploy_id
        self.last_log_timestamp = None
        self.processed_log_ids = set()
        
    async def get_deploy_status(self) -> Optional[str]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–π —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è"""
        try:
            deploy_info = mcp_render_get_deploy(
                serviceId=self.service_id,
                deployId=self.deploy_id
            )
            return deploy_info.get("status", "unknown")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –¥–µ–ø–ª–æ—è: {e}")
            return None
    
    async def get_recent_logs(self, log_type: str = "app", limit: int = 50) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç —Ä–µ–∞–ª—å–Ω—ã–µ –ª–æ–≥–∏ —á–µ—Ä–µ–∑ MCP API"""
        try:
            # –ü–æ–ª—É—á–∞–µ–º –ª–æ–≥–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 5 –º–∏–Ω—É—Ç
            end_time = datetime.utcnow()
            start_time = end_time - timedelta(minutes=5)
            
            logs_response = mcp_render_list_logs(
                resource=[self.service_id],
                type=[log_type],
                limit=limit,
                startTime=start_time.isoformat() + "Z",
                endTime=end_time.isoformat() + "Z",
                direction="backward"
            )
            
            return logs_response.get("logs", [])
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –ª–æ–≥–æ–≤: {e}")
            return []
    
    async def get_build_logs(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏ —Å–±–æ—Ä–∫–∏"""
        return await self.get_recent_logs("build", 100)
    
    async def get_app_logs(self) -> List[Dict]:
        """–ü–æ–ª—É—á–∞–µ—Ç –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        return await self.get_recent_logs("app", 100)
    
    def analyze_log_severity(self, log: Dict) -> str:
        """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç —Å–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å –ª–æ–≥–∞"""
        message = log.get("message", "").lower()
        level = log.get("level", "info").lower()
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ Python
        critical_python_errors = [
            "indentationerror", "syntaxerror", "importerror",
            "modulenotfounderror", "attributerror", "nameerror",
            "typeerror", "valueerror", "keyerror", "indexerror"
        ]
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ —Å–±–æ—Ä–∫–∏
        critical_build_errors = [
            "build failed", "installation failed", "dependency error",
            "pip error", "package not found", "version conflict",
            "compilation failed", "make error"
        ]
        
        # –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        critical_app_errors = [
            "connection refused", "database error", "authentication failed",
            "permission denied", "file not found", "port already in use",
            "out of memory", "disk full", "service unavailable"
        ]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏
        all_critical = critical_python_errors + critical_build_errors + critical_app_errors
        if any(keyword in message for keyword in all_critical):
            return "critical"
        
        # –û—à–∏–±–∫–∏ —Å–±–æ—Ä–∫–∏
        if log.get("type") == "build" and any(keyword in message for keyword in [
            "warning", "deprecated", "outdated", "version mismatch"
        ]):
            return "build_warning"
        
        # –û—à–∏–±–∫–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if log.get("type") == "app" and any(keyword in message for keyword in [
            "timeout", "retry", "fallback", "degraded"
        ]):
            return "app_warning"
        
        # –û–±—ã—á–Ω—ã–µ —É—Ä–æ–≤–Ω–∏
        if level in ["error", "err"]:
            return "error"
        elif level in ["warning", "warn"]:
            return "warning"
        elif level in ["info", "information"]:
            return "info"
        else:
            return "debug"
    
    def format_log_message(self, log: Dict) -> str:
        """–§–æ—Ä–º–∞—Ç–∏—Ä—É–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ –ª–æ–≥–∞"""
        timestamp = log.get("timestamp", "")
        level = log.get("level", "info")
        message = log.get("message", "")
        log_type = log.get("type", "app")
        
        # –§–æ—Ä–º–∞—Ç–∏—Ä—É–µ–º timestamp
        if timestamp:
            try:
                dt = datetime.fromisoformat(timestamp.replace('Z', '+00:00'))
                formatted_time = dt.strftime("%H:%M:%S")
            except:
                formatted_time = timestamp
        else:
            formatted_time = "??:??:??"
        
        return f"[{formatted_time}] {log_type.upper()}:{level.upper()} - {message}"
    
    def should_notify(self, severity: str, log: Dict) -> bool:
        """–û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, –Ω—É–∂–Ω–æ –ª–∏ –æ—Ç–ø—Ä–∞–≤–∏—Ç—å —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ"""
        if severity == "critical":
            return True
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—à–∏–±–æ–∫ —Å–±–æ—Ä–∫–∏
        if severity == "build_warning" and log.get("type") == "build":
            return True
        
        # –£–≤–µ–¥–æ–º–ª–µ–Ω–∏—è –¥–ª—è –æ—à–∏–±–æ–∫ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        if severity == "app_warning" and log.get("type") == "app":
            return True
        
        return False
    
    async def send_notification(self, severity: str, log: Dict):
        """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –æ –ø—Ä–æ–±–ª–µ–º–µ"""
        timestamp = datetime.now().strftime("%Y-%m-%d %H:%M:%S")
        formatted_msg = self.format_log_message(log)
        
        print(f"\nüö® –£–í–ï–î–û–ú–õ–ï–ù–ò–ï [{severity.upper()}] üö®")
        print(f"‚è∞ –í—Ä–µ–º—è: {timestamp}")
        print(f"üìä –°–µ—Ä–≤–∏—Å: {self.service_id}")
        print(f"üöÄ –î–µ–ø–ª–æ–π: {self.deploy_id}")
        print(f"üìù –°–æ–æ–±—â–µ–Ω–∏–µ: {formatted_msg}")
        print("=" * 80)
        
        # –ó–¥–µ—Å—å –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å –æ—Ç–ø—Ä–∞–≤–∫—É –≤ Slack, Discord, email –∏ —Ç.–¥.
        # await send_to_slack(severity, formatted_msg)
        # await send_to_discord(severity, formatted_msg)
        # await send_email_notification(severity, formatted_msg)
    
    async def monitor_deployment_realtime(self, max_wait_minutes: int = 15):
        """–û—Å–Ω–æ–≤–Ω–æ–π —Ü–∏–∫–ª –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞"""
        print(f"üîç –ù–∞—á–∏–Ω–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –¥–µ–ø–ª–æ—è {self.deploy_id}")
        print(f"üìä –°–µ—Ä–≤–∏—Å: {self.service_id}")
        print(f"‚è∞ –ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –≤—Ä–µ–º—è: {max_wait_minutes} –º–∏–Ω—É—Ç")
        print("=" * 80)
        
        start_time = datetime.now()
        end_time = start_time + timedelta(minutes=max_wait_minutes)
        
        issues_summary = {
            "critical": [],
            "build_warnings": [],
            "app_warnings": [],
            "errors": [],
            "warnings": []
        }
        
        while datetime.now() < end_time:
            try:
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è
                status = await self.get_deploy_status()
                if status:
                    print(f"üìà –°—Ç–∞—Ç—É—Å –¥–µ–ø–ª–æ—è: {status}")
                    
                    if status in ["live", "update_failed", "build_failed"]:
                        print(f"üèÅ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º: {status}")
                        break
                
                # –ü–æ–ª—É—á–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏ —Å–±–æ—Ä–∫–∏
                build_logs = await self.get_build_logs()
                for log in build_logs:
                    log_id = f"{log.get('timestamp', '')}_{hash(log.get('message', ''))}"
                    if log_id not in self.processed_log_ids:
                        self.processed_log_ids.add(log_id)
                        
                        severity = self.analyze_log_severity(log)
                        formatted_msg = self.format_log_message(log)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–≤–æ–¥–∫—É
                        if severity == "critical":
                            issues_summary["critical"].append(log)
                        elif severity == "build_warning":
                            issues_summary["build_warnings"].append(log)
                        elif severity == "error":
                            issues_summary["errors"].append(log)
                        elif severity == "warning":
                            issues_summary["warnings"].append(log)
                        
                        # –í—ã–≤–æ–¥–∏–º –ª–æ–≥
                        if severity == "critical":
                            print(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {formatted_msg}")
                        elif severity == "build_warning":
                            print(f"üî® –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –°–ë–û–†–ö–ò: {formatted_msg}")
                        elif severity == "error":
                            print(f"‚ùå –û–®–ò–ë–ö–ê: {formatted_msg}")
                        elif severity == "warning":
                            print(f"‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {formatted_msg}")
                        elif "successful" in log.get("message", "").lower():
                            print(f"‚úÖ –£–°–ü–ï–•: {formatted_msg}")
                        else:
                            print(f"‚ÑπÔ∏è  –ò–ù–§–û: {formatted_msg}")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if self.should_notify(severity, log):
                            await self.send_notification(severity, log)
                
                # –ü–æ–ª—É—á–∞–µ–º –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º –ª–æ–≥–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
                app_logs = await self.get_app_logs()
                for log in app_logs:
                    log_id = f"{log.get('timestamp', '')}_{hash(log.get('message', ''))}"
                    if log_id not in self.processed_log_ids:
                        self.processed_log_ids.add(log_id)
                        
                        severity = self.analyze_log_severity(log)
                        formatted_msg = self.format_log_message(log)
                        
                        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Å–≤–æ–¥–∫—É
                        if severity == "critical":
                            issues_summary["critical"].append(log)
                        elif severity == "app_warning":
                            issues_summary["app_warnings"].append(log)
                        elif severity == "error":
                            issues_summary["errors"].append(log)
                        elif severity == "warning":
                            issues_summary["warnings"].append(log)
                        
                        # –í—ã–≤–æ–¥–∏–º –ª–æ–≥
                        if severity == "critical":
                            print(f"üö® –ö–†–ò–¢–ò–ß–ï–°–ö–ê–Ø –û–®–ò–ë–ö–ê: {formatted_msg}")
                        elif severity == "app_warning":
                            print(f"üêõ –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï –ü–†–ò–õ–û–ñ–ï–ù–ò–Ø: {formatted_msg}")
                        elif severity == "error":
                            print(f"‚ùå –û–®–ò–ë–ö–ê: {formatted_msg}")
                        elif severity == "warning":
                            print(f"‚ö†Ô∏è  –ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï: {formatted_msg}")
                        else:
                            print(f"‚ÑπÔ∏è  –ò–ù–§–û: {formatted_msg}")
                        
                        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
                        if self.should_notify(severity, log):
                            await self.send_notification(severity, log)
                
                # –ñ–¥–µ–º –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–µ–π –ø—Ä–æ–≤–µ—Ä–∫–æ–π
                await asyncio.sleep(30)
                
            except KeyboardInterrupt:
                print("\nüõë –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
                break
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞: {e}")
                await asyncio.sleep(10)
        
        # –§–∏–Ω–∞–ª—å–Ω–∞—è —Å–≤–æ–¥–∫–∞
        duration = datetime.now() - start_time
        total_issues = sum(len(issues) for issues in issues_summary.values())
        
        print("\n" + "=" * 80)
        print("üìä –§–ò–ù–ê–õ–¨–ù–ê–Ø –°–í–û–î–ö–ê –ú–û–ù–ò–¢–û–†–ò–ù–ì–ê")
        print("=" * 80)
        print(f"‚è±Ô∏è  –î–ª–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å: {duration}")
        print(f"üö® –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–µ –æ—à–∏–±–∫–∏: {len(issues_summary['critical'])}")
        print(f"üî® –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è —Å–±–æ—Ä–∫–∏: {len(issues_summary['build_warnings'])}")
        print(f"üêõ –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è: {len(issues_summary['app_warnings'])}")
        print(f"‚ùå –û–±—ã—á–Ω—ã–µ –æ—à–∏–±–∫–∏: {len(issues_summary['errors'])}")
        print(f"‚ö†Ô∏è  –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(issues_summary['warnings'])}")
        print(f"üìà –í—Å–µ–≥–æ –ø—Ä–æ–±–ª–µ–º: {total_issues}")
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö –æ—à–∏–±–∫–∞—Ö
        if issues_summary["critical"]:
            print("\nüö® –ö–†–ò–¢–ò–ß–ï–°–ö–ò–ï –û–®–ò–ë–ö–ò:")
            for issue in issues_summary["critical"]:
                print(f"  - {self.format_log_message(issue)}")
        
        return {
            "issues_summary": issues_summary,
            "total_issues": total_issues,
            "duration": str(duration),
            "deploy_status": await self.get_deploy_status()
        }

async def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    if len(sys.argv) < 3:
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: python real_render_monitor.py <service_id> <deploy_id> [max_wait_minutes]")
        print("–ü—Ä–∏–º–µ—Ä: python real_render_monitor.py srv-d3bv87r7mgec73a336s0 dep-d3g3ld49c44c73a8cgk0 15")
        sys.exit(1)
    
    service_id = sys.argv[1]
    deploy_id = sys.argv[2]
    max_wait = int(sys.argv[3]) if len(sys.argv) > 3 else 15
    
    monitor = RealRenderMonitor(service_id, deploy_id)
    result = await monitor.monitor_deployment_realtime(max_wait)
    
    # –í–æ–∑–≤—Ä–∞—â–∞–µ–º –∫–æ–¥ –≤—ã—Ö–æ–¥–∞ –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
    if result["total_issues"] > 0:
        print(f"\n‚ùå –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —Å {result['total_issues']} –ø—Ä–æ–±–ª–µ–º–∞–º–∏")
        sys.exit(1)
    else:
        print(f"\n‚úÖ –î–µ–ø–ª–æ–π –∑–∞–≤–µ—Ä—à–µ–Ω —É—Å–ø–µ—à–Ω–æ")
        sys.exit(0)

if __name__ == "__main__":
    asyncio.run(main())
